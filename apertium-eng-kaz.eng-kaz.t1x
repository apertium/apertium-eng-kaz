<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE transfer SYSTEM "transfer.dtd"> --> 
<!-- -*- sgml -*- -->
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="pers-verb"> <!-- past and present tense -->
      <cat-item tags="vblex.pres.*"/>
      <cat-item tags="vblex.pres"/>
      <cat-item tags="vblex.past"/>
    </def-cat>   
    <def-cat n="approx-inf-verb"> <!-- infinitive and present where infinitive should have been found (tagger error) -->
      <cat-item tags="vblex.inf"/> <!-- This may be dangerous and should be treated at tagger level -->
      <cat-item tags="vbmod.ger"/>
    </def-cat>
    <def-cat n="vaux-will"> <!-- future -->
      <cat-item lemma="will" tags="vaux.inf"/>
    </def-cat>
<def-cat n="vaux-would"> <!-- future -->
      <cat-item lemma="would" tags="vaux.past"/>
    </def-cat>
<def-cat n="vaux-must"> <!-- must -->
      <cat-item lemma="must" tags="vaux.*"/>
    </def-cat>
<def-cat n="vaux-may"> <!-- must -->
      <cat-item lemma="may" tags="vaux.*"/>
      <cat-item lemma="might" tags="vaux.*"/>
    </def-cat>

<def-cat n="vbmod-have-to"> <!-- have -->
      <cat-item lemma="have# to" tags="vbmod.*"/>
    </def-cat>
<def-cat n="vbmod-want-to"> <!-- want -->
      <cat-item lemma="want# to" tags="vbmod.*"/>
    </def-cat>
<def-cat n="vbmod-need-to"> <!-- need -->
      <cat-item lemma="need# to" tags="vbmod.*"/>
    </def-cat>

 <def-cat n="vaux-can"> 
      <cat-item lemma="can" tags="vaux.pres"/>
      <cat-item lemma="can" tags="vaux.past"/>
    </def-cat>
<def-cat n="vaux-should"> <!-- future -->
      <cat-item lemma="should" tags="vaux.inf"/>
    </def-cat>

<def-cat n="verb-inf"> <!-- past and present tense -->
      <cat-item tags="vblex.ger"/>
</def-cat>
    <def-cat n="pers-verb-to-be"> <!-- past and present tense -->
      <cat-item tags="vbser.pres"/>
      <cat-item tags="vbser.pres.*"/>
      <cat-item tags="vbser.past.*"/>
      <cat-item tags="vbser.past"/>
 <!-- <cat-item tags="vbser.pp"/> --> <!-- I think this does not belong here -->
    </def-cat>
    <def-cat n="verb-ing"> <!-- past and present tense -->
      <cat-item tags="vblex.ger"/>
<!--<cat-item tags="vbser.ger"/>
<cat-item tags="vbhaver.ger"/> --> <!-- We'll try later -->
      <cat-item tags="vbmod.ger"/> 
   </def-cat>   

 <def-cat n="NP_verb-ing"> <!-- for ger like NP, I like playing-->
      <cat-item tags="vblex.ger"/>
   </def-cat>   
<def-cat n="verb-pp"> <!-- present perfect tense -->
      <cat-item tags="vblex.pp"/>
<cat-item tags="vbser.pp"/>
<cat-item tags="vbhaver.pp"/>

   </def-cat> 
  <def-cat n="vaux-have"> <!--perfect vbhaver -->
      <cat-item lemma="have" tags="vbhaver.*"/>
    </def-cat>

 <def-cat n="vblex-have"> <!-- to have as a lexical verb -->
      <cat-item lemma="have" tags="vblex.*"/>
    </def-cat>

 <def-cat n="vblex-need"> <!-- to have as a lexical verb -->
      <cat-item lemma="need" tags="vblex.*"/>
    </def-cat>

  <def-cat n="vaux-do"> <!--perfect vbhaver -->
      <cat-item lemma="do" tags="vbdo.*"/>
    </def-cat>
    <def-cat n="not">
      <cat-item lemma="not" tags="adv"/>
     </def-cat>

<def-cat n="old">
      <cat-item lemma="old" tags="adj.*"/>
     </def-cat>

<def-cat n="one-another">
      <cat-item lemma="one another" tags="n.*"/>
      <cat-item lemma="each other" tags="n.*"/>
     </def-cat>

<def-cat n="years">
      <cat-item lemma="year" tags="n.pl.*"/>
      <cat-item lemma="year" tags="n.pl"/>
     </def-cat>


<!--     
<def-cat n="be">
      <cat-item lemma="be" tags="vbser.inf"/>
<cat-item lemma="be" tags="vbser.ger"/>
   <cat-item lemma="be" tags="vbser.pp"/>

     </def-cat>
-->     
<def-cat n="been">
 <cat-item lemma="be" tags="vbser.pp"/>
</def-cat>     

<def-cat n="being">
 <cat-item lemma="be" tags="vbser.ger"/>
</def-cat>     

<def-cat n="be"> <!-- needed? -->
 <cat-item lemma="be" tags="vbser.inf"/>
</def-cat>     

     
<def-cat n="have">
      <cat-item lemma="have" tags="vblex.inf"/>
     </def-cat>

  <def-cat n="vaux-ing"> <!--not prs cont -->
      <cat-item lemma="be" tags="vbser.*"/>
    </def-cat>
    
    <def-cat n="nom">
       <cat-item tags="n.*"/>
      <cat-item tags="np.top"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np.ant.*"/>
      <cat-item tags="np.top.*"/>

    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
     </def-cat>
    <def-cat n="adjec">
    <cat-item tags="adj"/>
    <cat-item tags="adj.sint"/>
    </def-cat>
    <def-cat n="sup-adjec">
      <cat-item tags="adj.sint.sup"/>
      <cat-item tags="adj.sint.sup.*"/>
    </def-cat>

  <def-cat n="comp-adjec">
      <cat-item tags="adj.sint.comp"/>
      <cat-item tags="adj.sint.comp.*"/>
    </def-cat>

    <def-cat n="non-sup-adjec">
      <cat-item tags="adj"/>
      <cat-item tags="adj.sint"/>
  <!--    <cat-item tags="adj.sint.comp"/>      
      <cat-item tags="adj.sint.comp.*"/>-->
    </def-cat>


    <def-cat n="the-most">
      <cat-item lemma="the most" tags="det.qnt.sp"/>
    </def-cat>

  <def-cat n="more">
      <cat-item lemma="more" tags="preadv"/>
    </def-cat>

    <def-cat n="det">
      <cat-item tags="det.def.*"/>
      <cat-item tags="det.ind.*"/>
      <cat-item tags="det.pos.*"/>
      <cat-item tags="det.dem.*"/>
    </def-cat>
    <def-cat n="the">
      <cat-item tags="det.def.sp" lemma="the"/>
    </def-cat>
    <def-cat n="prep">
      <cat-item tags="pr"/>
     </def-cat>
  <def-cat n="rel">
      <cat-item tags="rel"/>
 <cat-item tags="rel.*"/>
     </def-cat>

    <def-cat n="obj-pron">
       <cat-item tags="prn.obj.*"/>
    </def-cat>
  <def-cat n="pron-neg">
      <cat-item tags="prn.*"/>
      </def-cat>

    <def-cat n="pron-dem">
      <cat-item tags="prn.*"/>
    </def-cat>

    <def-cat n="subj-pron">
       <cat-item tags="prn.subj.*"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="sent"/>
    </def-cat>
 <def-cat n="cnjadv">
       <cat-item tags="cnjadv"/>
    </def-cat>

 <def-cat n="cnjcoo">
       <cat-item tags="cnjcoo"/>
    </def-cat>

  <def-cat n="preadv">
      <cat-item tags="preadv.*"/>
      <cat-item tags="preadv"/>
    </def-cat>

  <def-cat n="adv-itg">
      <cat-item tags="adv.itg"/>
      
    </def-cat>


    <def-cat n="adv">
      <cat-item tags="adv.*"/>
      <cat-item tags="adv"/>
    </def-cat>

   
  </section-def-cats>
 
  <section-def-attrs>
    <def-attr n="a_tense">
      <attr-item tags="pres"/>
      <attr-item tags="past"/>

    </def-attr> 
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np.ant.m"/>
      <attr-item tags="np.ant.f"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="a_adjec">
       <attr-item tags="adj"/>
    </def-attr>
     <def-attr n="a_num">
      <attr-item tags="num"/>
    </def-attr>
    <def-attr n="a_gen">
      <attr-item tags="f"/>
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
    </def-attr>
    <def-attr n="a_pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
 <attr-item tags="vaux"/>
    </def-attr>
 <def-attr n="a_cnjsub">
       <attr-item tags="cnjsub"/>
    </def-attr>
 <def-attr n="a_cnjcoo">
       <attr-item tags="post"/>
       <attr-item tags="cnjcoo"/>
    </def-attr>
    <def-attr n="a_kaz_verb"> 
      <attr-item tags="v.tv"/>
      <attr-item tags="v.iv"/>
    </def-attr>
  <def-attr n="a_pron"> 
      <attr-item tags="prn"/>
      <attr-item tags="prn.neg"/>
 <attr-item tags="prn.ind"/>
   <attr-item tags="prn.dem.*"/>
 <attr-item tags="prn.dem"/>
 <attr-item tags="prn.itg"/>
<attr-item tags="prn.qnt"/>
 <attr-item tags="prn.dem.*"/> 
 <attr-item tags="prn.*"/>   
</def-attr>
    <def-attr n="a_kaz_perspron"> 
      <attr-item tags="prn.pers"/>
    </def-attr>
    <def-attr n="a_cas">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="dat"/>
      <attr-item tags="gen"/>
      <attr-item tags="loc"/>
      <attr-item tags="ins"/>
      <attr-item tags="abl"/>
    </def-attr>
    <def-attr n="a_Rcas">
      <attr-item tags="Rnom"/>
      <attr-item tags="Racc"/>
      <attr-item tags="Rdat"/>
      <attr-item tags="Rgen"/>
      <attr-item tags="Rloc"/>
      <attr-item tags="Rins"/>
      <attr-item tags="Rabl"/>
    </def-attr>
    <def-attr n="a_possessive"> <!-- check if complete -->
      <attr-item tags="PXD"/> <!-- to be determined -->
      <attr-item tags="px3sp"/>
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
    </def-attr>

    <def-attr n="a_postposition"> <!-- Kazakh postposition indicators -->
      <attr-item tags="n"/> 
      <attr-item tags="post"/>
	 
    </def-attr>
    <def-attr n="a_det">  <!-- determiner tag -->
      <attr-item tags="det"/>
    </def-attr>
    <def-attr n="a_dem">  <!-- demonstrative tag -->
      <attr-item tags="dem"/>
    </def-attr>
    <def-attr n="a_pos">  <!-- possessive tag -->
      <attr-item tags="pos"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="number"/>
    <def-var n="current_verb"/>
    <def-var n="possessive"/>
    <def-var n="plural"/>
    <def-var n="case"/>
  <def-var n="caseFirstWord"/>
    <def-var n="tense"/>
    <def-var n="verb-pers"/> <!-- State variable -->
    <def-var n="verb-nbr"/> <!-- State variable -->
    <def-var n="formality"/> <!-- Used to generate formal versions of 2nd person pronouns -->
    <def-var n="pptag"/> <!-- Will contain the tag of the next postpositional phrase generated (AdvP, GenP, etc.) -->

    <def-var n="genpp"/> <!-- yes: will generate postposition; no= won't -->
    <def-var n="pplemma"/> <!-- lemma of postpostion -->
    <def-var n="ppcat"/> <!-- category of postposition -->
    <def-var n="ppinfl"/> <!-- inflexion information for postposition -->
    <def-var n="postposition_lu"/> <!-- complete postposition ready for lu -->        
    <def-var n="noun_lu"/> <!-- complete noun in prep X rules, ready for lu -->
    <def-var n="NEW-noun_lu"/> <!-- complete noun lu, linked, new version -->
    <def-var n="adjec_lu"/> <!-- adjective, ready for lu -->
<def-var n="subj-pron_lu"/> <!-- complete noun in prep X rules, ready for lu -->
<def-var n="obj-pron_lu"/>
<def-var n="pron_lu"/>
<def-var n="num_lu"/>    
<def-var n="noun_lu_with_poss"/> <!-- same, with possessive -->
    <def-var n="np-poss"/> <!-- possessive for noun_lu_with_poss -->
    <def-var n="poss-frm"/> <!-- formality for possessives -->
    <def-var n="preblank-1"/>
    <def-var n="preblank-2"/>
 <def-var n="cnjadv_lu"/> <!-- for conditional IF -->
  <def-var n="cnjcoo_lu"/> <!-- for THAN -->   
  </section-def-vars>
  <section-def-lists>
    <def-list n="pseudo_modal_verbs"> <!-- Verbs that can take verb-ing as object -->
      <list-item v="like"/>
      <list-item v="enjoy"/>
      <list-item v="start"/>
      <list-item v="finish"/>
    </def-list>
    <def-list n="negative_pron"> <!-- Verbs that can take verb-ing as object -->
      <list-item v="nothing"/>
      <list-item v="nobody"/>
     <!--   <list-item v="anything"/>-->
    
    </def-list>
  </section-def-lists>
  

  <section-def-macros>

    <def-macro n="out-blank-if-not-single-space" npar="1">
<!-- Outputs nothing if the blank is " " and the blank otherwise..-->
<!-- Takes one position parameter -->
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <b pos="1"/>
                <lit v=" "/>
              </equal>
            </not>
          </test>
          <out>
            <b pos="1"/>
          </out>
        </when>
      </choose>
    </def-macro>
    
     <def-macro n="process-preblank-1" npar="2">
<!-- Sets preblank-1 to null if it is just a single blank;
     sets it to superblank 1 otherwise -->
      <choose>
        <when>
          <test>
              <equal>
                <b pos="1"/>
                <lit v=" "/>
              </equal>
          </test>
          <let>
            <var n="preblank-1"/><lit v=""/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="preblank-1"/><b pos="1"/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
 
     <def-macro n="process-preblank-2" npar="1">
<!-- Sets preblank-2 to null if it is just a single blank;
     sets it to superblank 1 otherwise -->
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <b pos="1"/>
                <lit v=" "/>
              </equal>
            </not>
          </test>
          <let>
            <var n="preblank-2"/><b pos="1"/>
          </let>
        </when>
        <otherwise>
          <let>
            <var n="preblank-2"/><lit v=""/>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    


    <def-macro n="initialize_number" npar="0">
          <let>
            <var n="number"/>
            <lit v=""/>
          </let>
    </def-macro>

    <def-macro n="initialize_case_to_nominative" npar="0">
          <let>
            <var n="case"/>
            <lit-tag v="nom"/>
          </let>
    </def-macro>

    <def-macro n="assign-tl-plural-if-sl-nbr-plural" npar="1">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_nbr"/>
              <lit-tag v="pl"/>
            </equal>
          </test>
          <let><var n="number"/><lit-tag v="pl"/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="assign-tl-number-according-to-sl-nbr" npar="1">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_nbr"/>
              <lit-tag v="pl"/>
            </equal>
          </test>
          <let><var n="number"/><lit-tag v="pl"/></let>
        </when>
        <otherwise>
          <let><var n="number"/><lit-tag v="sg"/></let>
        </otherwise>   
      </choose>
    </def-macro>


    <!--<def-macro n="choose_case_and_postposition" npar="1">  
    <let><var n="pptag"/><lit-tag v="AdvP"/></let> <let><var n="genpp"/><lit v="no"/></let> 
    <choose>
      <when> 
        <test>
          <or>
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="n"/>
            </equal>
 	
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="post"/>
            </equal>

          </or>  
        </test>
        <let><var n="genpp"/><lit v="yes"/></let> 
      </when>
    </choose>

    <choose>
      <when>
        <test>
          <equal><var n="genpp"/><lit v="no"/></equal>
        </test>
        <choose> 
          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="in"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="loc"/>
            </let>
 	  </when> 

      <when>   
        <test>
          <equal caseless="yes">
            <clip pos="1" side="sl" part="lem"/>
            <lit v="at"/>
          </equal>
        </test>
        <let>
          <var n="case"/>
          <lit-tag v="loc"/>
        </let>
	</when> 
  
           <when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="from"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>
	   </when>    

          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="to"/>
              </equal>
            </test>
            <let>
              <var n="case"/>
              <lit-tag v="dat"/>
            </let>
	  </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="with"/>
                </equal>
             </test>
             <let>
               <var n="case"/>
               <lit-tag v="ins"/>
             </let>
       	   </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="of"/>
                 </equal>
              </test>
              <let>
                <var n="case"/>
                <lit-tag v="gen"/>
              </let>
              <let>
                 <var n="pptag"/>
                 <lit-tag v="GenP"/>   
              </let>
	   </when>    

           <otherwise>
              <let>
                <var n="case"/>
                <lit-tag v="ins"/> 
              </let>
              <let>
                <var n="pptag"/>
                <lit-tag v="AdvP"/>   
              </let>
            </otherwise>
	</choose>
      </when> 

      <when>  
        <test>
          <equal>
             <var n="genpp"/>
             <lit v="yes"/>
          </equal>
        </test>
        <choose>
          <when> 
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="n"/>
	       </equal>
             </test>
             <let><var n="case"/><lit-tag v="gen"/></let>
             <let><var n="pptag"/><lit-tag v="AdvP"/></let>
             <let><var n="postposition_lu"/> 
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="n"/>
                        <lit-tag v="px3sp"/>
        		<clip part="a_cas" side="tl" pos="1"/> 
                      </concat>
             </let>
	  </when>
          <when> 
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="post"/>
	       </equal>
             </test>
             <choose>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rnom"/></equal></test>
                   <let><var n="case"/><lit-tag v="nom"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rdat"/></equal></test>
                   <let><var n="case"/><lit-tag v="dat"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rabl"/></equal></test>
                   <let><var n="case"/><lit-tag v="abl"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rloc"/></equal></test>
                   <let><var n="case"/><lit-tag v="loc"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rins"/></equal></test>
                   <let><var n="case"/><lit-tag v="ins"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Racc"/></equal></test>
                   <let><var n="case"/><lit-tag v="acc"/></let>
                </when>
                <when> <
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rgen"/></equal></test>
                   <let><var n="case"/><lit-tag v="gen"/></let>
                </when>
             </choose>
             <let><var n="pptag"/><lit-tag v="AdvP"/></let>
             <let><var n="postposition_lu"/> 
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="post"/>
                      </concat>
             </let>
	  </when>
	</choose>
       </when>
     </choose>
    </def-macro>

-->

<def-macro n="change-case" npar="1">  <!--change case to lower for p1 sg "I" -->
<choose>
  <when>
       <test>
         <equal>
           
           <clip pos="1" side="sl" part="a_pers"/>
            <lit-tag v="p1"/>
          
           </equal>
          </test>
       <modify-case>
        <clip pos="1" side="tl" part="lem"/>
          <lit v="aa"/>
        </modify-case>
             <let>
		<var n="caseFirstWord"/>
		<lit v="aa"/>
	      </let>
       </when>
  <otherwise> 
  <modify-case>
        <clip pos="1" side="tl" part="lem"/>
          <lit v="aa"/>
        </modify-case>
	      <let>
		<var n="caseFirstWord"/>
		<lit v="aa"/>
	      </let>
	    </otherwise>
</choose>

</def-macro>

  <def-macro n="choose_case_and_postposition2" npar="2">  
    <let><var n="pptag"/><lit-tag v="PP"/></let> <!-- for most of them -->
    <let><var n="genpp"/><lit v="no"/></let> <!-- for simple cases -->

    <choose>
      <when> <!-- make genpp="yes" when a postposition is detected -->
        <test>
          <or>
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="n"/>
            </equal>
     
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="post"/>
            </equal>

          </or>  
        </test>
        <let><var n="genpp"/><lit v="yes"/></let> <!-- for simple cases -->
      </when>
    </choose>

    <choose>
      <when>
        <test>
          <equal><var n="genpp"/><lit v="no"/></equal>
        </test>
        <choose> <!-- no postpositions -->
          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="in"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="loc"/>
            </let>
       </when> 

      <when>   <!-- at and in have the same translation: locative -->
        <test>
          <equal caseless="yes">
            <clip pos="1" side="sl" part="lem"/>
            <lit v="at"/>
          </equal>
        </test>
        <let>
          <var n="case"/>
          <lit-tag v="loc"/>
        </let>
    </when> 
  
           <when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="from"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>

       </when>    
<when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="after"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>
       </when>    

          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="to"/>
              </equal>
            </test>
            <let>
              <var n="case"/>
              <lit-tag v="dat"/>
            </let>
      </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="with"/>
                </equal>
             </test>
             <let>
               <var n="case"/>
               <lit-tag v="ins"/>
             </let>
              </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="of"/>
                 </equal>
              </test>
              <let>
                <var n="case"/>
                <lit-tag v="gen"/>
              </let>
              <let>
                 <var n="pptag"/>
                 <lit-tag v="GenP"/>   
              </let>
       </when>    

           <otherwise>
              <let>
                <var n="case"/>
                <lit-tag v="ins"/> <!-- Choice when we don't know the translation of the preposition, can be improved -->
              </let>
              <let>
                <var n="pptag"/>
                <lit-tag v="PP"/>  
              </let>
            </otherwise>
    </choose>
      </when> <!-- End of solutions without postpositions -->

      <when>  <!--- Now, with postpositions -->
        <test>
          <equal>
             <var n="genpp"/>
             <lit v="yes"/>
          </equal>
        </test>
        <choose> <!-- Generate postposition --> 
          <when> <!-- noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="n"/>
           </equal>
             </test>
             <let><var n="case"/><lit-tag v="gen"/></let>
             <let><var n="pptag"/><lit-tag v="PP"/></let>
             <!-- we need to compute "possessive"  --> 
 
<let><var n="possessive"/><lit-tag v="px3sp"/></let> <!-- default value -->

<choose> 
<when>
   <test>
      <and>
          <equal><clip pos="2" side="sl" part="a_pers"/><lit-tag  v="p1"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="sg"/></equal>
       </and>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1sg"/></let>
</when>


<when>
   <test>
      <and>
          <equal><clip  pos="2" side="sl" part="a_pers"/><lit-tag  v="p1"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="pl"/></equal>
       </and>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1pl"/></let>
</when>
<when><!--under you-->
   <test>
      <and>
          <equal><clip pos="2" side="sl" part="a_pers"/><lit-tag  v="p2"/></equal>
          <equal><clip pos="2" side="sl" part="a_nbr"/><lit-tag v="sp"/></equal>
	
       </and>
    </test>      
<let><var  n="formality"/><lit-tag v="frm"/></let>
<let><var  n="possessive"/><lit-tag v="px2sg.frm"/></let>
</when>



<!-- ...etc remaining cases ... -->
</choose>
                  
              <!-- end of computation of "possessive" -->
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="n"/>
			
                        <!-- <lit-tag v="px3sp"/>  -->
                        <var n="possessive"/>
                        
                        
                <clip part="a_cas" side="tl" pos="1"/> 
                      </concat>
             </let>
      </when>
          <when> <!-- non-noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="post"/>
           </equal>
             </test>
             <choose>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rnom"/></equal></test>
                   <let><var n="case"/><lit-tag v="nom"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rdat"/></equal></test>
                   <let><var n="case"/><lit-tag v="dat"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rabl"/></equal></test>
                   <let><var n="case"/><lit-tag v="abl"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rloc"/></equal></test>
                   <let><var n="case"/><lit-tag v="loc"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rins"/></equal></test>
                   <let><var n="case"/><lit-tag v="ins"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Racc"/></equal></test>
                   <let><var n="case"/><lit-tag v="acc"/></let>
                </when>
                <when> <!-- This case is unlikely, but we'll leave it just in case -->
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rgen"/></equal></test>
                   <let><var n="case"/><lit-tag v="gen"/></let>
                </when>
             </choose>
             <let><var n="pptag"/><lit-tag v="PP"/></let>
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="post"/>
                      </concat>
             </let>
      </when>
    </choose>
       </when>
     </choose>
    </def-macro>



<def-macro n="NEW-gen-simple-verb" npar="1">  
<choose>
<when>
<test>
   <in caseless="yes">
      <clip pos="1" side="sl" part="lem"/>
      <list n="pseudo_modal_verbs"/>
   </in>
</test>
<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP_psmod"/></tag> 
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>

          <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
</out>
</when>

<otherwise>
<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag><!-- negative -->
        <tag><lit-tag v="CD"/></tag> 
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>
          <lit-tag v="5"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
          <lit-tag v="7"/>
        </lu>
      </chunk>
        </out>
</otherwise>
</choose>
</def-macro>
<def-macro n="NEW-gen-simple-verb-neg" npar="1">
<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
        <tag><lit-tag v="CD"/></tag>       
</tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>
          <lit-tag v="5"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
          <lit-tag v="7"/>
        </lu>
      </chunk>
        </out>
</def-macro>

<def-macro n="NEW-gen-simple-verb-pass" npar="1">
<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag>
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
         
          <lit-tag v="4"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
</def-macro>


<def-macro n="NEW-gen-simple-verb-pass-neg" npar="1">
<out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><var n="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag>
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="6"/>          
          <lit-tag v="4"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
</def-macro>


<def-macro n="default-nbr-pers" npar="0">
    <choose>
     <when>
       <test>
         <equal><var n="verb-pers"/><lit v=""/></equal></test>
      <let>
          <var n="verb-pers"/><lit-tag v="p3"/>
      </let>
     </when>
    </choose>
    <choose>
     <when>
       <test>
         <equal><var n="verb-nbr"/><lit v=""/></equal></test>
      <let>
          <var n="verb-nbr"/><lit-tag v="sg"/>
      </let>
     </when>
    </choose>
</def-macro>    







<!-- The build-noun-lu will not be used when all prep X rules are converted -->
<def-macro n="build-noun-lu" npar="1"> 
     <let>
           <var n="noun_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <var n="number"/> 
               <var n="case"/>
           </concat>  
        </let>
</def-macro>


<def-macro n="NEW-build-noun-lu-2-4-5" npar="1"> 
     <let>
           <var n="NEW-noun_lu"/>
           <concat>
               <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- for number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive -->
               <lit-tag v="5"/> <!-- for case -->
           </concat>  
        </let>
</def-macro>

<def-macro n="NEW-build-noun-lu-2-4-5-sg" npar="1"> 
     <let>
           <var n="NEW-noun_lu"/>
           <concat>
               <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- force singular number (used with numerals) -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive -->
               <lit-tag v="5"/> <!-- for case -->
           </concat>  
        </let>
</def-macro>

<def-macro n="build-adjec-lu" npar="1"> 
     <let>
           <var n="adjec_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_adjec"/>
           </concat>  
        </let>
</def-macro>

<def-macro n="build-pron-lu" npar="1"> 
     <let>
           <var n="pron_lu"/>
           <concat>
          <clip pos="1" side="tl" part="lem"/> 
          <clip pos="1" side="tl" part="a_pron"/>
               <lit-tag v="2"/> <!-- for number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive -->
               <lit-tag v="5"/> <!-- for case -->
           </concat>  
        </let>
</def-macro>

<def-macro n="build-num-lu" npar="1"> 
     <let>
           <var n="num_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_num"/>
           </concat>  
        </let>
</def-macro>



<def-macro n="build-subj-pron-lu" npar="1"> 
     <let>
           <var n="subj-pron_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_kaz_perspron"/>
               <var n="number"/> 
               <var n="case"/>
           </concat>  
        </let>

</def-macro>
<def-macro n="build-obj-pron-lu" npar="1"> 
 <choose>
    <when>
     <test>  
       <equal>
          <clip pos="1" side="sl" part="a_pers"/>
          <lit-tag v="p2"/>
       </equal>
     </test>
     <let><var n="formality"/><lit-tag v="frm"/></let>
    </when>
     <otherwise>
     <let><var n="formality"/><lit v=""/></let>
     </otherwise>
  </choose>

     <let>
           <var n="obj-pron_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_kaz_perspron"/>



               <clip pos="1" side="sl" part="a_pers"/>

               <var n="number"/> 
               <var n="formality"/>
               <var n="case"/>
           </concat>  
        </let>

</def-macro>

<def-macro n="build-cnjadv-lu" npar="1"> 
     <let>
           <var n="cnjadv_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
             <clip pos="1" side="tl" part="a_cnjsub"/>
           </concat>  
        </let>
</def-macro>

<def-macro n="build-cnjcoo-lu" npar="1"> 
     <let>
           <var n="cnjcoo_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
             <clip pos="1" side="tl" part="a_cnjcoo"/>
           </concat>  
        </let>
</def-macro>

<def-macro n="build-possessive-from-possessive-determiner" npar="1">


<choose> 
<when>
   <test>
          <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit  v="my"/></equal>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1sg"/></let>
</when>


<when>
   <test>
          <equal caseless="yes"><clip  pos="1" side="sl" part="lem"/><lit  v="our"/></equal>
    </test>      
          <let><var  n="possessive"/><lit-tag v="px1pl"/></let>
</when>
<when>
   <test>
          <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit  v="your"/></equal>
    </test>      
<let><var  n="possessive"/><lit-tag v="px2sg"/></let>
</when>

<otherwise>
<let><var n="possessive"/><lit-tag v="px3sp"/></let> <!-- default value -->
</otherwise>

</choose>

</def-macro>
<!-- This should be called build-noun-lu when all prep X rules are converted -->
<def-macro n="build-noun-lu-with-possessive" npar="2">
     <let><var n="poss-frm"/><lit v=""/></let>
     <choose>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="my"/></equal></test> <let><var n="np-poss"/><lit-tag v="px1sg"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="our"/></equal></test> <let><var n="np-poss"/><lit-tag v="px1pl"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="your"/></equal></test> <let><var n="np-poss"/><lit-tag v="px2sg"/></let>
             <let><var n="poss-frm"/><lit-tag v="frm"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="his"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="her"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="its"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="their"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
      <otherwise><let><var n="np-poss"/><lit v=""/></let></otherwise>
     </choose>
     <let>
           <var n="noun_lu_with_poss"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <var n="number"/> 
               <var n="np-poss"/>
               <var n="poss-frm"/>
               <var n="case"/>
           </concat>  
        </let>

</def-macro>

</section-def-macros>





<section-rules>


<rule comment="NEW RULE: one another">  
  <pattern>
    <pattern-item n="one-another"/>
  </pattern>
  <action>
 
    <out>
    <chunk name="One-anoth">
    <tags>
  <tag><lit-tag v="One-anoth"/></tag>
<tag><lit-tag v="PXD"/></tag>
<tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
<clip pos="1" side="tl" part="lem"/> 
<clip pos="1" side="tl" part="a_pron"/> 
<lit-tag v="recip"/>
<lit-tag v="2"/>
<lit-tag v="3"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: noun1 noun2">  <!-- football player-->
  <pattern>
    <pattern-item n="nom"/>
 <pattern-item n="nom"/>
  </pattern>
  <action>

    <out>
    <chunk name="noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
     <clip pos="1" side="tl" part="lem"/> 
     <clip pos="1" side="tl" part="a_nom"/>
     <clip pos="1" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
    </lu>
   
<b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
                <lit-tag v="px3sp"/><!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: want to + infinitive"> <!--want to verb -->
  <pattern>

    <pattern-item n="vbmod-want-to"/>
    <pattern-item n="pers-verb"/>  <!--I want to go - Менің барғым келеді-->
  </pattern>
<action>
  <call-macro n="default-nbr-pers"/>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="VP_want_to">
      <tags>
        <tag><lit-tag v="VP_want_to_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
	
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
    	   <lit-tag v="prc_vol"/>
	 <lit-tag v="3"/>
           <lit-tag v="2"/>
                  
        </lu>
        <b/> 
        <lu>
          <lit v="кел"/>
          <lit-tag v="vaux"/>
          <lit-tag v="aor"/>
         <lit-tag v="p3"/>
         <lit-tag v="2"/>
        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="VP_want_to">
        <tags>
        <tag><lit-tag v="VP_want_to_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->

      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
    	   <lit-tag v="prc_vol"/>
           <lit-tag v="3"/>
           <lit-tag v="2"/>
           
        </lu>
        <b/> 
        <lu>
          <lit v="кел"/>
         <lit-tag v="vaux"/>
	 <lit-tag v="ifi"/>
         <lit-tag v="p3"/>
         <lit-tag v="2"/>
        </lu>
      </chunk>
  </out>
      </when>
    </choose>
      </action>
</rule>



<rule comment="NEW RULE: num years old">  <!-- num years old-->
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="years"/>
    <pattern-item n="old"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="2"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="num-years-old">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="loc"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
	<b pos="1"/>
         <b pos="2"/>
	<lu>
      <var n="NEW-noun_lu"/>

    </lu>
    </chunk>
    </out>
      </action>
</rule>




<rule comment="NEW RULE: have to + infinitive"> <!--have to verb -->
  <pattern>

    <pattern-item n="vbmod-have-to"/>
    <pattern-item n="pers-verb"/>  <!--I have to go - Менің баруым керек-->
  </pattern>
<action>
<!--
  <call-macro n="default-nbr-pers"/> -->
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="VP_have_to">
      <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
          <lit-tag v="n"/>
          <lit-tag v="nom"/>
        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="VP_have_to">
        <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
          <lit-tag v="n"/>	
          <lit-tag v="nom"/>	
        </lu>
<b/>
<lu>
         <lit v="е"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="cop"/>
         <lit-tag v="ifi"/>
         <lit-tag v="p3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
  </out>
      </when>
    </choose>
      </action>
</rule>

<rule comment="NEW RULE: need to + infinitive"> <!--need to verb -->
  <pattern>

    <pattern-item n="vbmod-need-to"/>
    <pattern-item n="pers-verb"/>  <!--I need to go - Маған бару керек-->
  </pattern>
<action>
  <call-macro n="default-nbr-pers"/>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="VP_need_to">
      <tags>
        <tag><lit-tag v="VP_need"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
          <lit-tag v="n"/>
          <lit-tag v="nom"/>
        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="VP_need_to">
        <tags>
        <tag><lit-tag v="VP_need"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
          <lit-tag v="n"/>
          <lit-tag v="nom"/>
        </lu>
<b/>
<lu>
         <lit v="е"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="cop"/>
         <lit-tag v="ifi"/>
         <lit-tag v="p3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
  </out>
      </when>
    </choose>
      </action>
</rule>


<rule comment="NEW RULE: vaux-do not approx-inf-verb"> 
<!-- superblank management not solved -->
  <pattern>
    <pattern-item n="vaux-do"/>
    <pattern-item n="not"/>
    <pattern-item n="approx-inf-verb"/>
  </pattern>
  <action>
  <out><b pos="1"/><b pos="2"/></out> 
  
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
      <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="3"/> 
     </call-macro>
      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/><!--I didn't go - Мен бармадым -->
             <lit-tag v="past"/>
          </equal>
        </test>
         <let><var n="tense"/><lit-tag v="ifi"/></let> 
      <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="3"/> 
     </call-macro>
      </when>

    </choose>
  </action>
</rule>





 <!--
<rule comment="NEW RULE: Is/Was?">Is/Was? 

  <pattern>
    <pattern-item n="pers-verb-to-be"/>
   </pattern>
  <action>
  
       <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
     
      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
         <let><var n="tense"/><lit-tag v="ifi"/></let> 
   
      </when>
    </choose>
 <out> <chunk name="VP_q">  
      <tags>
       <tag><lit-tag v="VPQ"/></tag>
       <tag> <var n="tense"/>  </tag>
      </tags>
      <lu>
      <lit v="ма"/>
      <lit-tag v="qst"/>
       <lit-tag v="2"/> 
       </lu>
     </chunk>
</out> 
  </action>
</rule>
-->


<rule comment="NEW RULE: to be noun"> <!--I am a doctor - ^Мен/мен<post>/мен<prn><pers><p1><sg><nom>$ ^дәрігермін/дәрігер<n><nom>+е<cop><p1><sg>$^./.<sent>$
-->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pres"/></equal></test>
        <out>
      <chunk name="verb-be">
      <tags>
        <tag><lit-tag v="VP_be"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
     </tags>
<lu>
         <lit v="е"/>
        <lit-tag v="cop"/>
        <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
        </out>
      </when>
     <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal></test>
        <out>
      <chunk name="verb-past-be">
      <tags>
        <tag><lit-tag v="VP_past_be"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>

          
       <lu>
         <lit v="бол"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="vaux"/>
         <lit-tag v="4"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
        </out>
      </when>
       
    </choose>   
  </action>
</rule>


 
<rule comment="NEW RULE: to be not"> <!--I am not a doctor -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="not"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pres"/></equal></test>
        <out>
      <chunk name="verb-be">
      <tags>
        <tag><lit-tag v="VP_not_be"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
     </tags>
<b pos="1"/>
<lu>
         <lit v="е"/>
        <lit-tag v="cop"/>
         <lit-tag v="6"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>

      </chunk>
        </out>
      </when>
     <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal></test>
        <out>
      <chunk name="verb-past-be">
      <tags>
        <tag><lit-tag v="VP_past_not_be"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
          
       <lu>
         <lit v="бол"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="vaux"/>
         <lit-tag v="6"/>
         <lit-tag v="4"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
        </out>
      </when>
       
    </choose>   
  </action>
</rule>





<rule comment="NEW RULE: need"> <!--I need a book - Magan kitap kerek-->
  <pattern>
    <pattern-item n="vblex-need"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pres"/></equal></test>
        <out>
      <chunk name="verb-need">
      <tags>
        <tag><lit-tag v="VP_need"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
       <lu>
         <lit v="керек"/>
         <lit-tag v="n"/>
         <lit-tag v="nom"/>
       </lu>
      </chunk>
        </out>
      </when>
     <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal></test>
        <out>
      <chunk name="verb-need">
      <tags>
        <tag><lit-tag v="VP_need"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
           <lu>
         <lit v="керек"/>
         <lit-tag v="n"/>
         <lit-tag v="nom"/>
       </lu>
       <b/>
       <lu>
         <lit v="е"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="cop"/>
         <lit-tag v="4"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
        </out>
      </when>
       
    </choose>   
  </action>
</rule>

<!-- MLF has commented this rule which is breaking stuff:

<rule comment="NEW RULE: verb conditional"> 
  <pattern>

    <pattern-item n="pers-verb"/>
    
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="cond">
      <tags>
        <tag><lit-tag v="VP_cond"/></tag>
        <tag><lit-tag v="ND"/></tag>  
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="gna_cond"/></tag>  
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="NXD"/></tag> 
      </tags>
      <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
    	  <lit-tag v="4"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
       
      </chunk>
  </out>
      
  </action>
</rule>
-->

<!--
<rule comment="NEW RULE: verb + verb-ing ">  
  <pattern> 
    <pattern-item n="pers-verb"/>
    <pattern-item n="verb-ing"/>  
   </pattern>
  <action>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="verb1">  
      <tags>
        <tag><lit-tag v="VP1_verb"/></tag>
        <tag><lit-tag v="ND"/></tag> 
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="a_tense"/></tag>
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="NXD"/></tag> 
      </tags>
            <b pos="1"/>
   	<lu>
         <clip pos="1" side="tl" part="lem"/>
	 <clip pos="1" side="tl" part="a_kaz_verb"/>
 	<lit-tag v="6"/>
	<lit-tag v="aor"/>
	<lit-tag v="3"/>
        <lit-tag v="2"/>
 	 </lu>
         </chunk>
<chunk name="verb_ger">  
      <tags>
       <tag><lit-tag v="VP2_Ger"/></tag>
        <tag><lit-tag v="ND"/></tag> 
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="a_tense"/></tag>
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="NXD"/></tag> 
        <tag><lit-tag v="CD"/></tag>
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	 <lit-tag v="ger"/>
	<lit-tag v="acc"/>
        
  
        </lu>
    
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
        <chunk name="verb1">  
      <tags>
        <tag><lit-tag v="VP1_verb"/></tag>
        <tag><lit-tag v="ND"/></tag> 
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="a_tense"/></tag>
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="NXD"/></tag> 
      </tags>
            <b pos="1"/>
   	<lu>
         <clip pos="1" side="tl" part="lem"/>
	 <clip pos="1" side="tl" part="a_kaz_verb"/>
 	
 	<lit-tag v="6"/>
	<lit-tag v="ifi"/>
	<lit-tag v="3"/>
        <lit-tag v="2"/>
 	 </lu>
         </chunk>
<chunk name="verb_ger">  
      <tags>
        <tag><lit-tag v="VP2_Ger"/></tag>
        <tag><lit-tag v="ND"/></tag> 
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="a_tense"/></tag>
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="NXD"/></tag> 
        <tag><lit-tag v="CD"/></tag>
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	 <lit-tag v="ger"/>
	<lit-tag v="acc"/>
        </lu>
    
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
      <out><b pos="1"/></out>  
      <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="2"/>  
     </call-macro>
      </otherwise> 
    </choose>
      </action>
</rule>

-->


<rule comment="NEW RULE: verb-ing ">  
  <pattern> 
       <pattern-item n="NP_verb-ing"/>  
   </pattern>
  <action>
<call-macro n="default-nbr-pers"/>               
        <out>
     <chunk name="NP_ger">  
      <tags>
       <tag><lit-tag v="NP"/></tag>
        <tag><lit-tag v="PD"/></tag> 
        <tag><lit-tag v="ND"/></tag> 
       
        <tag><lit-tag v="PXD"/></tag> 
        <tag><lit-tag v="CD"/></tag>
      </tags>
            
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
         <lit-tag v="ger"/>
         <lit-tag v="5"/>
        </lu>
    
      </chunk>
  </out>
 </action>
</rule>






<rule comment="NEW RULE: DO?"> 
<!-- for questions-->
  <pattern>
    <pattern-item n="vaux-do"/>
   
  </pattern>
  <action>
       <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
     
      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
         <let><var n="tense"/><lit-tag v="ifi"/></let> 
   
      </when>

    </choose>
 <out> <chunk name="VP_q">  
      <tags>
       <tag><lit-tag v="VPQ"/></tag>
       <tag> <var n="tense"/>  </tag>
      </tags>
      <lu>
      <lit v="ма"/>
      <lit-tag v="qst"/>
       <lit-tag v="2"/> 
       </lu>
     </chunk>
</out> 
  </action>
</rule>


<rule comment="NEW RULE: have"> <!--I have a book - Mende kitap bar-->
  <pattern>
    <pattern-item n="vblex-have"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pres"/></equal></test>
        <out>
      <chunk name="verb-have">
      <tags>
        <tag><lit-tag v="VP_have"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
       <lu>
         <lit v="бар"/>
         <lit-tag v="adj"/>
       </lu>
      </chunk>
        </out>
      </when>
     <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal></test>
        <out>
      <chunk name="verb-have">
      <tags>
        <tag><lit-tag v="VP_have"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
           <lu>
         <lit v="бар"/>
         <lit-tag v="adj"/>
       </lu>
       <b/>
       <lu>
         <lit v="е"/>  <!-- Note this is a cyrillic е -->
         <lit-tag v="cop"/>
         <lit-tag v="4"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
      </chunk>
        </out>
      </when>
       
    </choose>   
  </action>
</rule>

<rule comment="NEW RULE: do not have"> <!--I do not have a book - Mende kitap jok-->
  <pattern>
    <pattern-item n="vaux-do"/>
    <pattern-item n="not"/>
    <pattern-item n="vaux-have"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="pres"/></equal></test>
        <out>
      <chunk name="verb-not-have">
      <tags>
        <tag><lit-tag v="VP_have"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
       <lu>
         <lit v="жоқ"/>
         <lit-tag v="adj"/>
       </lu>
      </chunk>
        </out>
      </when>
     <when>
      <test><equal><clip pos="1" side="sl" part="a_tense"/><lit-tag v="past"/></equal></test>
        <out>
      <chunk name="verb-not-have">
      <tags>
        <tag><lit-tag v="VP_have"/></tag>
        <tag><lit-tag v="sg"/></tag> <!-- number -->
        <tag><lit-tag v="p3"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessives for verbs??? maybe we need them -->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
           <lu>
         <lit v="бол"/>
         <lit-tag v="vaux"/>       
         <lit-tag v="6"/> 
         <lit-tag v="4"/>      
         <lit-tag v="3"/>
         <lit-tag v="2"/>       
        </lu>
       
      </chunk>
        </out>
      </when>
       
    </choose>   
  </action>
</rule>



<rule comment="NEW RULE: verb"> 
  <pattern>
    <pattern-item n="pers-verb"/>
  </pattern>
  <action>
     <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>

      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </when>

      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>




<rule comment="NEW RULE: be + verb-ing "> 
  <pattern> 
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="verb-ing"/>  
   </pattern>
  <action>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>

      <chunk name="pers-verb">  
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_perf"/>
    	
        </lu>
        <b/> 
	<lu>
          <lit v="жат"/>  
 	<lit-tag v="vaux"/>
 	<lit-tag v="6"/>
	 <lit-tag v="4"/>
	  <lit-tag v="3"/>
          <lit-tag v="2"/>
 	
 	        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="pers-verb">
            <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_perf"/>
            </lu>
        <b/> 
	<lu>
          <lit v="отыр"/> <!--I was not playing - Мен ойнап отырмадым  -->
 	<lit-tag v="vaux"/>
 	  <lit-tag v="6"/>
          <lit-tag v="4"/>
          <lit-tag v="5"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
          <lit-tag v="7"/>
</lu>
          </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
      <out><b pos="1"/></out>  
      <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="2"/>  
     </call-macro>
      </otherwise> 
    </choose>
      </action>
</rule>




<rule comment="NEW RULE: be + not + verb-ing ">  
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="not"/>
    <pattern-item n="verb-ing"/>  
   </pattern>
  <action>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/> <!--I am not playing - Мен ойнап жатқан жоқпын -->
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="pres"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_perf"/>
    	
        </lu>
        <b/> 
	<lu>
          <lit v="жатқан жоқ"/> <!-- This is a very strange way of doing negatives -->
 	<lit-tag v="vaux"/>
          
 	<lit-tag v="neg"/>
 <lit-tag v="4"/>
          <lit-tag v="5"/>
          <lit-tag v="3"/>
          <lit-tag v="2"/>
          <lit-tag v="7"/> 	

 	
 	        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="pers-verb">
            <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_perf"/>
            </lu>
        <b/> 
	<lu>
          <lit v="отыр"/>
 	<lit-tag v="vaux"/>
 	 <lit-tag v="6"/>
	 <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
 	</lu>
          </chunk>
        </out>
      </when>
      <otherwise> 
        <let><var n="tense"/><lit-tag v="aor"/></let> <!-- This is clearly wrong but we'll change it later -->
      <out><b pos="1"/><b pos="2"/></out>
      <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="3"/>  
     </call-macro>
      </otherwise> 
    </choose>
      </action>
</rule>



<rule comment="NEW RULE: will + be + verb-ing"> <!--I will be playing - Мен ойнап отырармын -->
  <pattern>
<pattern-item n="vaux-will"/>
      <pattern-item n="be"/>
    <pattern-item n="verb-ing"/> <!-- * -->
   </pattern>
 <action>
     <call-macro n="default-nbr-pers"/>
    
       <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="fut"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
        <b pos="1"/>
        <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/>
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
 	 <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
     
     
        
   
  </action>
</rule>

<rule comment="NEW RULE: will + not + be + verb-ing"> <!--I will not be playing - Мен ойнап отырмаймын -->
  <pattern>
<pattern-item n="vaux-will"/>
       <pattern-item n="not"/>
<pattern-item n="be"/>
    <pattern-item n="verb-ing"/> <!-- * -->
   </pattern>
 <action>
     <call-macro n="default-nbr-pers"/>
    
       <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="aor"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
        <b pos="1"/>
        <b pos="2"/>
        <b pos="3"/>
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> <!-- this position is probably not optimal -->
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
	<lit-tag v="6"/>
 	<lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
     
        
   
  </action>
</rule>

<rule comment="NEW RULE: will + have + verb-pp"> <!--I will have пщ - Мен барармын -->
<!-- superblank management not corrected -->
  <pattern>
<pattern-item n="vaux-will"/>
      <pattern-item n="vaux-have"/>
    <pattern-item n="verb-pp"/> <!-- * -->
   </pattern>
 <action>
   <out><b pos="1"/><b pos="2"/></out>
   <let><var n="tense"/><lit-tag v="fut"/></let>
    <call-macro n="NEW-gen-simple-verb">
         <with-param pos="3"/> 
    </call-macro>   
        
  </action>
</rule>

<rule comment="NEW RULE: will + not + have + verb-pp"> <!--I will have пщ - Мен бармармын ?? -->
<!-- superblank management not corrected -->
  <pattern>
<pattern-item n="vaux-will"/>
       <pattern-item n="not"/>
      <pattern-item n="vaux-have"/>
    <pattern-item n="verb-pp"/> <!-- * -->
   </pattern>
 <action>
      <out><b pos="1"/><b pos="2"/><b pos="3"/></out>
   <let><var n="tense"/><lit-tag v="fut"/></let>
    <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="4"/> 
    </call-macro>   
        
  </action>
</rule>

<rule comment="NEW RULE: will + have + been + verb-ing"> <!--Future perfect Cont I will have been playing - Мен ойнап боламын -->
  <pattern>
<pattern-item n="vaux-will"/>
<pattern-item n="vaux-have"/>
      <pattern-item n="been"/>
     <pattern-item n="verb-ing"/> <!-- * -->
   </pattern>
 <action>
     <call-macro n="default-nbr-pers"/>
           <out>
      <chunk name="pers-verb">
       <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="aor"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
     <b pos="1"/>
     <b pos="2"/>
     <b pos="3"/>
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> <!-- this position is probably not optimal -->
        <lu>
          <lit v="бол"/>
          <lit-tag v="vaux"/>
 	<lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
            
   
  </action>
</rule>


<rule comment="NEW RULE: will + not + have + been + verb-ing"> <!--Future perfect Cont in Neg I will NOT have been playing  -->
  <pattern>
<pattern-item n="vaux-will"/>
<pattern-item n="not"/>
<pattern-item n="vaux-have"/>
      <pattern-item n="been"/>
     <pattern-item n="verb-ing"/> <!-- * -->
   </pattern>
 <action>
     <call-macro n="default-nbr-pers"/>
           <out>
      <chunk name="pers-verb">
     <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="aor"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
     <b pos="1"/>
     <b pos="2"/>
     <b pos="3"/>
     <b pos="4"/>
        <lu>
          <clip pos="5" side="tl" part="lem"/>
	  <clip pos="5" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b pos="1"/> <!-- this position is probably not optimal -->
        <lu>
          <lit v="бол"/>
          <lit-tag v="vaux"/>
 	<lit-tag v="6"/>
 	<lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
         
   
  </action>
</rule>







<rule comment="NEW RULE: will + verb"> <!-- will verb -->
<!-- superblank management needs to be corrected -->
  <pattern>
    <pattern-item n="vaux-will"/>
    <pattern-item n="pers-verb"/> <!-- MLF 20120618 this to catch tagger errors, should be solved there not here! -->
   </pattern>
  <action>

        <out><b pos="1"/></out>
    <let><var n="tense"/><lit-tag v="aor"/></let>
    <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
    </call-macro>   
  </action>
</rule>


<rule comment="NEW RULE: would + verb"> <!-- will verb -->
<!-- superblank management needs to be corrected -->
  <pattern>
    <pattern-item n="vaux-would"/>
    <pattern-item n="approx-inf-verb"/> 
   </pattern>
  <action>
       <out>
      <chunk name="pers-verb">  
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ifi"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	<lit-tag v="gpr_impf"/>
    	
        </lu>
        <b/> 
	<lu>
            <lit v="е"/>
        <lit-tag v="cop"/>
          <lit-tag v="4"/>
         <lit-tag v="3"/>
         <lit-tag v="2"/>
       </lu>
       </chunk>
  </out> 
  </action>
</rule>

<rule comment="NEW RULE: will + not +  verb"> <!-- Future Simple in negative -->
<!-- superblank management needs to be corrected -->
  <pattern>
    <pattern-item n="vaux-will"/>
<pattern-item n="not"/>
    <pattern-item n="pers-verb"/> <!-- MLF 20120618 this to catch tagger errors, should be solved there not here! -->
   </pattern>
  <action>	
    <let><var n="tense"/><lit-tag v="aor"/></let>
            <out><b pos="1"/><b pos="2"/></out>
    <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="3"/> 
    </call-macro>   
  </action>
</rule>

<rule comment="NEW RULE: must + not + infinitive"> <!--with # -->
  <pattern>

    <pattern-item n="vaux-must"/>
    <pattern-item n="not"/>
    <pattern-item n="approx-inf-verb"/>  
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="must-inf">
      <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
       <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
           <lit-tag v="6"/>
    	   <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
         <lit-tag v="n"/>
          <lit-tag v="nom"/>	
        </lu>
      </chunk>
  </out>
      
  </action>
</rule>


<rule comment="NEW RULE: must + infinitive"> <!--must verb -->
  <pattern>

    <pattern-item n="vaux-must"/>
    <pattern-item n="pers-verb"/>  <!--I must go - Мен баруым керек-->
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="must-inf">
      <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
         <lit-tag v="n"/>
          <lit-tag v="nom"/>	
        </lu>
      </chunk>
  </out>
      
  </action>
</rule>

<!-- may/might-->
<rule comment="NEW RULE: may/might + not + infinitive"> 
  <pattern>

    <pattern-item n="vaux-may"/>
    <pattern-item n="not"/>
    <pattern-item n="approx-inf-verb"/>  
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="must-inf">
      <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
       <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
           <lit-tag v="6"/>
    	   <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="керек"/>
         <lit-tag v="adj"/>
        </lu>
      </chunk>
  </out>
      
  </action>
</rule>


<rule comment="NEW RULE: may/might + infinitive"> <!--may/might verb -->
  <pattern>

    <pattern-item n="vaux-may"/>
    <pattern-item n="pers-verb"/>  
  </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="must-inf">
      <tags>
        <tag><lit-tag v="VP_must_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="мүмкін"/>
         <lit-tag v="adj"/>
        </lu>
      </chunk>
  </out>
      
  </action>
</rule>





<rule comment="NEW RULE: can + not + infinitive "> <!--Men bara alam - I can go-->
  <pattern> <!-- generalize it for "could" with a tense selector -->
    <pattern-item n="vaux-can"/>
    <pattern-item n="not"/>
    <pattern-item n="approx-inf-verb"/> 
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_impf"/>
    	
        </lu>
        <b/> 
	<lu>
          <lit v="ал"/>
 	<lit-tag v="vaux"/>
 	<lit-tag v="neg"/>
	 <lit-tag v="aor"/>
	  <lit-tag v="3"/>
          <lit-tag v="2"/>
 	
 	        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="pers-verb">
            <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>

        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_impf"/>
            </lu>
        <b/> 
	<lu>
          <lit v="ал"/>
 	<lit-tag v="vaux"/>
 	<lit-tag v="neg"/>
	 <lit-tag v="ifi"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
 	</lu>
          </chunk>
        </out>
      </when>
    </choose>
      </action>
</rule>


<rule comment="NEW RULE: can + infinitive "> <!--Men bara alam - I can go-->
  <pattern> <!-- generalize it for "could" with a tense selector -->
    <pattern-item n="vaux-can"/>
    <pattern-item n="approx-inf-verb"/> 
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
<choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
            
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_impf"/>
    	
        </lu>
        <b/> 
	<lu>
          <lit v="ал"/>
 	<lit-tag v="vaux"/>
	 <lit-tag v="aor"/>
	  <lit-tag v="3"/>
          <lit-tag v="2"/>
 	
 	        </lu>
      </chunk>
  </out>
       
  </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <out>
      <chunk name="pers-verb">
            <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="tense"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
            <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
	<lit-tag v="prc_impf"/>
            </lu>
        <b/> 
	<lu>
          <lit v="ал"/>
 	<lit-tag v="vaux"/>
	 <lit-tag v="ifi"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
 	</lu>
          </chunk>
        </out>
      </when>
    </choose>
      </action>
</rule>





<rule comment="NEW RULE: have?"> <!--have? -->

  <pattern>
    <pattern-item n="vaux-have"/>
   </pattern>
  <action>
   <let><var n="tense"/><lit-tag v="past"/></let>
  
   <out> <chunk name="VP_q">  
      <tags>
       <tag><lit-tag v="VPQ"/></tag>
       <tag> <var n="tense"/>  </tag>
      </tags>
      <lu>
      <lit v="ма"/>
      <lit-tag v="qst"/>
       <lit-tag v="2"/> 
       </lu>
     </chunk>
</out> 
 
  </action>
</rule>

<rule comment="NEW RULE: have + verb-pp"> <!--prs perfect verb -->
<!-- superblank management not corrected yet -->
  <pattern>
    <pattern-item n="vaux-have"/>
    <pattern-item n="verb-pp"/> <!--past participle -->
   </pattern>
  <action>
   <let><var n="tense"/><lit-tag v="past"/></let>
   <out><b pos="1"/></out>
    <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
    </call-macro>   
  </action>
</rule>

<rule comment="NEW RULE: have + not + verb"> <!--prs perfect verb -->
<!-- superblank management not corrected yet -->
  <pattern>
    <pattern-item n="vaux-have"/>
 <pattern-item n="not"/>
    <pattern-item n="verb-pp"/> <!--past participle -->
   </pattern>
  <action>
     <out><b pos="1"/><b pos="2"/></out>
   <let><var n="tense"/><lit-tag v="past"/></let>
    <call-macro n="NEW-gen-simple-verb-neg">
         <with-param pos="3"/> 
    </call-macro>   
  </action>
</rule>
    
<rule comment="NEW RULE: have + been + verb-ing"> <!--Present Perfect Continuous I have been playing Мен ойнап отырғанмын -->
  <pattern>
    <pattern-item n="vaux-have"/>
    <pattern-item n="been"/> <!--past participle -->
 <pattern-item n="verb-ing"/>
   </pattern>
   <action>
    <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
        <out>
      <chunk name="pers-verb">
     <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="past"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
     <b pos="1"/>     
     <b pos="2"/>    
          
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
         <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when> 
    <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
        <out>
      <chunk name="pers-verb">
       <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="past"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
         <b pos="1"/>     
     <b pos="2"/>    
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> <!-- This is clearly wrong but we'll change it later -->
           <out><b pos="1"/><b pos="2"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
  
 </choose>
  </action>
</rule>

<rule comment="NEW RULE: have + not + been + verb-ing"> <!--Present Perfect Continuous in Negative I have not been playing Мен ойнап отырмағанмын -->
  <pattern>
    <pattern-item n="vaux-have"/>
<pattern-item n="not"/>
    <pattern-item n="been"/> <!--past participle -->
 <pattern-item n="verb-ing"/>
   </pattern>
   <action>
    <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
        <out>
      <chunk name="pers-verb">
     <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="past"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
    <b pos="1"/>     
     <b pos="2"/>   
     <b pos="3"/>   
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/>
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
           <lit-tag v="6"/>
         <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when> 
    <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="past"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative --> <!-- the verb itself is negative -->
     </tags>
    <b pos="1"/>     
     <b pos="2"/>   
     <b pos="3"/>   
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> <!-- This is clearly wrong but we'll change it later -->
           <out><b pos="1"/><b pos="2"/><b pos="3"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="4"/> 
     </call-macro>
      </otherwise> 
  
 </choose>
  </action>
</rule>

<rule comment="NEW RULE: should + inf"> <!-- I should go -  Менің барғаным жөн-->
  <pattern>
    
   <pattern-item n="vaux-should"/>
    <pattern-item n="pers-verb"/>
  </pattern>
  <action>
 
    <call-macro n="default-nbr-pers"/>
        <out>
      <chunk name="should-inf">
      <tags>
        <tag><lit-tag v="VP_should_inf"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag> <!-- person -->
        <tag><lit-tag v="ger_past"/></tag>  <!-- tense/conditionality -->
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	         <clip pos="2" side="tl" part="a_kaz_verb"/>
    	      <lit-tag v="4"/>
           <lit-tag v="5"/>
           <lit-tag v="nom"/>
        </lu>
        <b/> 
        <lu>
          <lit v="жөн"/>
          <lit-tag v="adj"/>	
        </lu>
      </chunk>
  </out>
      
  </action>

</rule>


<rule comment="NEW RULE: be + verb-pp"> <!--Pres and Past passive -->
<!-- superblank management to be corrected -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="verb-pp"/> <!--past participle -->
   </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let>
           <out><b pos="1"/></out>
      <call-macro n="NEW-gen-simple-verb-pass">
         <with-param pos="2"/> 
     </call-macro>

      </when>

      <when>
         <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let> 
   <out><b pos="1"/></out>
     <call-macro n="NEW-gen-simple-verb-pass">
         <with-param pos="2"/> 
     </call-macro>

      </when>

      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
   <out><b pos="1"/></out>
       <call-macro n="NEW-gen-simple-verb-pass">
         <with-param pos="2"/> 
     </call-macro>

      </otherwise> 
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: be + not + verb-pp"> <!--Pres and Past passive -->
<!-- superblank management to be corrected -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
<pattern-item n="not"/>
    <pattern-item n="verb-pp"/> <!--past participle -->
   </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
           <out><b pos="1"/><b pos="2"/></out>
     <call-macro n="NEW-gen-simple-verb-pass-neg">
         <with-param pos="3"/> 
     </call-macro>

      </when>

      <when>
         <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let> 
           <out><b pos="1"/><b pos="2"/></out>
     <call-macro n="NEW-gen-simple-verb-pass-neg">
         <with-param pos="3"/> 
     </call-macro>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
           <out><b pos="1"/><b pos="2"/></out>
      <call-macro n="NEW-gen-simple-verb-pass-neg">
         <with-param pos="3"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: have + been + verb-pp"> <!--Present Perfect Passive A books has been written  Кітап жазылып болған,Past perfect Кітап жазылған-->
<!-- not sure about the "past" part of this rule" -->
  <pattern>
    <pattern-item n="vaux-have"/>
    <pattern-item n="been"/> <!--past participle -->
 <pattern-item n="verb-pp"/>
    </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let> 
    <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="past"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
       <lu>
      <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
	  <lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/>
        <lu>
         <lit v="бол"/>
 	<lit-tag v="vaux"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
	
        </lu>
      </chunk>
        </out>
      </when>

      <when>
         <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let> 
    <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="past"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="NXD"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="4"/>
          <lit-tag v="3"/>	
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
   <out><b pos="1"/><b pos="2"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: have + not + been + verb-pp"> <!--Present Perfect Passive Negative A books has not been written ,Past perfect-->
  <pattern>
    <pattern-item n="vaux-have"/>
 <pattern-item n="not"/>
    <pattern-item n="verb-pp"/> <!--past participle -->
 <pattern-item n="verb-pp"/>
    </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let> 
    <out>
      <chunk name="pers-verb">
       <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="past"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
      <b pos="3"/>
       <lu>
      <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
	<lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
         <lit v="бол"/>
 	<lit-tag v="vaux"/>
            <lit-tag v="6"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
	
        </lu>
      </chunk>
        </out>
      </when>

      <when>
         <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let> 
    <out>
      <chunk name="pers-verb">
       <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="past"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
            <b pos="1"/>
      <b pos="2"/>
      <b pos="3"/>
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
 <lit-tag v="pass"/>
          <lit-tag v="6"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
	        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
           <out><b pos="1"/><b pos="2"/><b pos="3"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: will + be + verb-pp"> <!--Future1 Passive A books will be written  Кітап жазылады-->
<!-- superblank management not correct yet -->
  <pattern>
    <pattern-item n="vaux-will"/>
    <pattern-item n="be"/> <!--past participle -->
 <pattern-item n="verb-pp"/>
    </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
   
              <let><var n="tense"/><lit-tag v="aor"/></let> 
   <out><b pos="1"/><b pos="2"/></out>
    <call-macro n="NEW-gen-simple-verb-pass">
         <with-param pos="3"/> 
     </call-macro>
  </action>
</rule>

<rule comment="NEW RULE: will + not + be + verb-pp"> <!--Future1 Passive Negative A books will not be written-->
<!-- superblank management not correct yet -->
  <pattern>
    <pattern-item n="vaux-will"/>
<pattern-item n="not"/>
    <pattern-item n="be"/> <!--past participle -->
 <pattern-item n="verb-pp"/>
    </pattern>
  <action>    
   <call-macro n="default-nbr-pers"/>
   
               <let><var n="tense"/><lit-tag v="aor"/></let> 
                  <out><b pos="1"/><b pos="2"/><b pos="3"/></out> <!-- ** -->
    <call-macro n="NEW-gen-simple-verb-pass-neg">
         <with-param pos="4"/> 
     </call-macro>
      
  </action>
</rule>


<rule comment="NEW RULE: be + being + verb-ed"> <!-- Passive Progressive: A book is being written -Кітап жазылып жатыр  -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="being"/>
<pattern-item n="verb-pp"/>
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="pres"/></let>
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="pres"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="жат"/>
          <lit-tag v="vaux"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>

        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="ifi"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
        <lu>
          <clip pos="3" side="tl" part="lem"/>
	  <clip pos="3" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/>
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <lit-tag v="4"/>
	<lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> 
<out><b pos="1"/><b pos="2"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: be + not + being + verb-ed"> <!-- Passive Progressive: A book is not being written   -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
<pattern-item n="not"/>
    <pattern-item n="being"/>
<pattern-item n="verb-pp"/>
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="pres"/></let>
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="pres"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
      <b pos="3"/>
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="жатқан жоқ"/>
          <lit-tag v="vaux"/>
          
           <lit-tag v="neg"/>
 <lit-tag v="4"/>
	  <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
        <out>
      <chunk name="pers-verb">
     <tags>
        <tag><lit-tag v="VP"/></tag>
        <tag><lit-tag v="ND"/></tag> <!-- number -->
        <tag><lit-tag v="PD"/></tag>
        <tag><lit-tag v="ifi"/></tag>  
        <tag><lit-tag v="PXD"/></tag> <!-- possessive-->
        <tag><lit-tag v="neg"/></tag> <!-- negative -->
      </tags>
      <b pos="1"/>
      <b pos="2"/>
      <b pos="3"/>
        <lu>
          <clip pos="4" side="tl" part="lem"/>
	  <clip pos="4" side="tl" part="a_kaz_verb"/>
          <lit-tag v="pass"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b/> 
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <lit-tag v="6"/> 
          <lit-tag v="4"/>
	  <lit-tag v="3"/>
          <lit-tag v="2"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> <!-- This is clearly wrong but we'll change it later -->
       <out><b pos="1"/><b pos="2"/><b pos="3"/></out>
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: prep noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<!--
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
-->
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="2"/>
     </call-macro>
<!--
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
-->
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>




    
  <rule comment="NEW RULE: prep obj-pron"> <!--I go with you - Мен сізбен барам --> <!-- not converted yet -->
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="obj-pron"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-number-according-to-sl-nbr"><with-param pos="2"/></call-macro> 
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="2"/>
     </call-macro>
      <call-macro n="build-obj-pron-lu"><with-param pos="2"/></call-macro>
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-obj-pron">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- is it OK? -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
            </tags>
            <lu>  
               <var n="obj-pron_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-obj-pron">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="2" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- is it OK? -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag> 
            </tags>
            <lu>  
               <var n="obj-pron_lu"/>
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space">
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>


<rule comment="NEW RULE: adjec noun1 noun2">   <!-- for "good football players"-->
  <pattern>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
 <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5">
       <with-param pos="3"/>
  </call-macro> 
<call-macro n="build-adjec-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="adjec-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="adjec_lu"/>
     </lu>
	<b pos="1"/>
 <lu>
     <clip pos="2" side="tl" part="lem"/> 
     <clip pos="2" side="tl" part="a_nom"/>
     <clip pos="2" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
     </lu>
<b pos="2"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>

<rule comment="NEW RULE: adjec noun"> 
  <pattern>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5">
       <with-param pos="2"/>
  </call-macro> 
<call-macro n="build-adjec-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="adjec-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="adjec_lu"/>
     </lu>
	<b pos="1"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>

<rule comment="NEW RULE: det num noun1 noun2"> <!-- three good football players-->
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="4"/>
    </call-macro> <!-- noun is built in singular as the NP contains numerals -->
     <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder: use 'semantic' number for SL -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu>  
     <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
     </lu>
    <b pos="3"/>
 <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
  <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
<b pos="1"/>
  
    <lu> 
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu> 
 <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
    </lu>
    <b pos="3"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-num-nom"> <!-- the three good football players-->
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
    <lu>  
      <var n="num_lu"/>
    </lu>
    <b pos="2"/>
   <lu> 
 <clip pos="3" side="tl" part="lem"/> 
     <clip pos="3" side="tl" part="a_nom"/>
     <clip pos="3" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
    </lu>
    <b pos="3"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>

 
<rule comment="NEW RULE: det num noun"> 
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="3"/>
    </call-macro> <!-- noun is built in singular as the NP contains numerals -->
     <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder: use 'semantic' number for SL -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
  <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
<b pos="1"/>
  
    <lu> 
      <var n="num_lu"/>
     </lu>
    <b pos="2"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-num-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
    <lu>  
      <var n="num_lu"/>
    </lu>
    <b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>


<rule comment="NEW RULE: num noun1 noun2"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="3"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="num-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="tl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
	<b pos="1"/>
<lu>
     <clip pos="2" side="tl" part="lem"/> 
     <clip pos="2" side="tl" part="a_nom"/>
     <clip pos="2" side="tl" part="a_nbr"/>
     <lit-tag v="nom"/>
</lu>
	<b pos="2"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>


<rule comment="NEW RULE: num noun"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="2"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="num-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
	<b pos="1"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>




<rule comment="NEW RULE: prep num noun1 noun2"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="3"/>
      </call-macro>
<call-macro n="build-num-lu"><with-param pos="2"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  
               <var n="num_lu"/>
            </lu>
<b/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <clip pos="3" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="px3sp"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b pos="3"/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="4"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
 <lu>  
               <var n="num_lu"/>
            </lu>
 <b pos="2"/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <clip pos="3" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
<b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>

<rule comment="NEW RULE: prep num noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="3"/>
      </call-macro>
<call-macro n="build-num-lu"><with-param pos="2"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
            <lu>  
               <var n="num_lu"/>
            </lu>
 <b/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b pos="2"/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
            <b pos="1"/>
 <lu>  
               <var n="num_lu"/>
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: num adjec noun1 noun2"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
   <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="4"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
<call-macro n="build-adjec-lu"><with-param pos="2"/></call-macro> 
    <out>
    <chunk name="num-adjec-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
<b pos="1"/>
<lu>
      <var n="adjec_lu"/>
     </lu>
	<b pos="2"/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <clip pos="3" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
<b pos="3"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>


<rule comment="NEW RULE: num adjec noun"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<call-macro n="NEW-build-noun-lu-2-4-5-sg">
       <with-param pos="3"/>
  </call-macro>  <!-- noun is built in singular as the NP contains numerals -->
<call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
<call-macro n="build-adjec-lu"><with-param pos="2"/></call-macro> 
    <out>
    <chunk name="num-adjec-noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
<b pos="1"/>
<lu>
      <var n="adjec_lu"/>
     </lu>
	<b pos="2"/>
	<lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
      </action>
</rule>

<rule comment="NEW RULE: det num adjec noun1 noun2"> 
  <pattern>
    <pattern-item n="det"/>
     <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
   <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="5"/>
    </call-macro>
     <call-macro n="build-adjec-lu">
      <with-param pos="3"/>
    </call-macro>
  <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-num-adjec-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
  	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
 <b pos="2"/>
   <lu>  
      <var n="adjec_lu"/>
     </lu>
   <b pos="3"/>
 <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <clip pos="4" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
          
            </lu>
<b pos="4"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
        <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
    <lu> 
      <var n="num_lu"/>
     </lu>
     <b pos="2"/>
<lu> 
      <var n="adjec_lu"/>
     </lu>
<b pos="3"/>
<lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <clip pos="4" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
              </lu>
<b pos="4"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
<lu>  
      <var n="num_lu"/>
     </lu>
<b pos="2"/>
 <lu>  
      <var n="adjec_lu"/>
     </lu>
<b pos="3"/>
<lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <clip pos="4" side="tl" part="a_nbr"/> 
               <lit-tag v="nom"/> 
              </lu>
<b pos="4"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
   </otherwise>
</choose>
  </action>
</rule>


<rule comment="NEW RULE: det num adjec noun"> 
  <pattern>
    <pattern-item n="det"/>
     <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5-sg">
      <with-param pos="4"/>
    </call-macro>
     <call-macro n="build-adjec-lu">
      <with-param pos="3"/>
    </call-macro>
  <call-macro n="build-num-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-num-adjec-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
     <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
  	<b pos="1"/>
    <lu>  
      <var n="num_lu"/>
     </lu>
 <b pos="2"/>
   <lu>  
      <var n="adjec_lu"/>
     </lu>
   <b pos="3"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
        <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
    <lu> 
      <var n="num_lu"/>
     </lu>
     <b pos="2"/>
<lu> 
      <var n="adjec_lu"/>
     </lu>
<b pos="3"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
<lu>  
      <var n="num_lu"/>
     </lu>
<b pos="2"/>
 <lu>  
      <var n="adjec_lu"/>
     </lu>
<b pos="3"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
   </otherwise>
</choose>
  </action>
</rule>


<rule comment="NEW RULE: prep num adjec noun1 noun2"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="4"/>
     </call-macro>

 <call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
 <call-macro n="build-num-lu"><with-param pos="2"/></call-macro> 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-num-adj-noun">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="5" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="px3sp"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
  <lu>  
               <var n="num_lu"/>
            </lu>
 <b pos="2"/>
            <lu>  
               <var n="adjec_lu"/>
            </lu>
  <b pos="3"/>
 <lu> 
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <clip pos="4" side="tl" part="a_nbr"/>
                <lit-tag v="nom"/>
 </lu> 
 <b pos="4"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="5" side="tl" part="lem"/> 
               <clip pos="5" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-adj-noun">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="5" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="px3sp"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
<lu>  
               <var n="num_lu"/>
            </lu>
 <b pos="2"/>
 <lu>  
               <var n="adjec_lu"/>
            </lu>
 <b pos="3"/>
 <lu> 
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <clip pos="4" side="tl" part="a_nbr"/>
                <lit-tag v="nom"/>
 </lu> 
 <b pos="4"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="5" side="tl" part="lem"/> 
               <clip pos="5" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space">
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>

<rule comment="NEW RULE: prep num adjec noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="4"/>
     </call-macro>

 <call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
 <call-macro n="build-num-lu"><with-param pos="2"/></call-macro> 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-num-adj-noun">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
  <lu>  
               <var n="num_lu"/>
            </lu>
  <b pos="1"/>
            <lu>  
               <var n="adjec_lu"/>
            </lu>
  <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          <b pos="3"/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-adj-noun">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
<lu>  
               <var n="num_lu"/>
            </lu>
  <b pos="2"/>
 <lu>  
               <var n="adjec_lu"/>
            </lu>
  <b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="sg"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space">
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>


<rule comment="NEW RULE: prep det num adjec noun1 noun2">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="5"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5-sg">
    <with-param pos="6"/>
  </call-macro>  
 <call-macro n="build-num-lu">
    <with-param pos="3"/>
  </call-macro>  
<call-macro n="build-adjec-lu">
    <with-param pos="4"/>
  </call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-adjec-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="5" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="px3sp"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
       <b pos="1"/>
		<lu>
               <var n="num_lu"/>
            </lu>
         <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="4"/>
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-adjec-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="6" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><lit-tag v="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <lu>
               <var n="num_lu"/>
            </lu>
           <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b pos="4"/>
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-detart-num-adjec-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="6" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
             <b pos="1"/>
             <b pos="2"/>
             <lu>
               <var n="num_lu"/>
            </lu>
        <b pos="3"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="4"/>  
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>      
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-adjec-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="6" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
         <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
         <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>      
             <lu>
               <var n="num_lu"/>
            </lu>
             <b pos="4"/>
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
            <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-adjec-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="6" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags> 
                <b pos="1"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
               
        <b pos="2"/>
        <lu>
               <var n="num_lu"/>
            </lu>
	
            <b pos="3"/> <lu>
               <var n="adjec_lu"/>
            </lu>         
             <b pos="4"/>
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-detart-num-adjec-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="6" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="px3sp"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
               <lu>
               <var n="num_lu"/>
            </lu>
             <b pos="3"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="4"/> 
 <lu>
             <clip pos="5" side="tl" part="lem"/>
             <clip pos="5" side="tl" part="a_nom"/>
             <clip pos="5" side="tl" part="a_nbr"/>
             <lit-tag v="nom"/>
             </lu>
<b pos="5"/>
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>



<rule comment="NEW RULE: prep det num adjec noun">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
 <pattern-item n="num"/>
<pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="5"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5-sg">
    <with-param pos="5"/>
  </call-macro>  
 <call-macro n="build-num-lu">
    <with-param pos="3"/>
  </call-macro>  
<call-macro n="build-adjec-lu">
    <with-param pos="4"/>
  </call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-adjec-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="5" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
       <b pos="1"/>
		<lu>
               <var n="num_lu"/>
            </lu>
         <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="4"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-adjec-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><lit-tag v="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <lu>
               <var n="num_lu"/>
            </lu>
           <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b pos="4"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-detart-num-adjec-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
             <b pos="1"/>
             <b pos="2"/>
             <lu>
               <var n="num_lu"/>
            </lu>
        <b pos="3"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="4"/>        
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-adjec-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
         <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
         <b pos="2"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>      
             <lu>
               <var n="num_lu"/>
            </lu>
             <b pos="4"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
            <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-adjec-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags> 
                <b pos="1"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
               
        <b pos="2"/>
        <lu>
               <var n="num_lu"/>
            </lu>
	
            <b pos="3"/> <lu>
               <var n="adjec_lu"/>
            </lu>         
             <b pos="4"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-detart-num-adjec-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
               <lu>
               <var n="num_lu"/>
            </lu>
             <b pos="3"/>
	<lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="4"/> 
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: prep det noun">  
<!-- superblank management around determiner -->	
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="3"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5">
    <with-param pos="3"/>
  </call-macro>  
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b pos="2"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-detart-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case of noun, but not case of PP (needs to change) -->
         </tags>
            <b pos="1"/>
            <b pos="2"/> 
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case as computed -->
         </tags>  
             <b pos="1"/>        
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
            <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case as computed -->
           </tags>      
             <b pos="1"/>    
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
             <b pos="2"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-detart-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case as computed -->
           </tags>   
              <b pos="1"/>
              <b pos="2"/>
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: prep det comp-adjec noun">  
<!-- for comparative sint adj -->
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="comp-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="4"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5">
    <with-param pos="4"/>
  </call-macro>  
      <call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-comp_adj-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
              <lit-tag v="comp"/>
            </lu>
            <b pos="3"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-comp_adj-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="2"/>
            <lu>
               <var n="adjec_lu"/>
              <lit-tag v="comp"/>
            </lu>
              <b pos="3"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->

        <out>
          <chunk name="prep-detart-comp_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
         <b pos="1"/>
         <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
              <lit-tag v="comp"/>
            </lu>
            <b pos="3"/>        
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-comp_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
              <lit-tag v="comp"/>
            </lu>

            <b pos="3"/>      
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-comp_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>
           <b pos="1"/> 
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
           <b pos="2"/>
                <lu>
               <var n="adjec_lu"/>
              <lit-tag v="comp"/>
            </lu>
            <b pos="3"/>          
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
           <chunk name="prep-detart-comp_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
           <lu>
                        <var n="adjec_lu"/> 
              <lit-tag v="comp"/>
            </lu>
            <b pos="3"/>
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: prep det sup-adjec noun">  
<!-- for superlative sint adj -->
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="sup-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="4"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5">
    <with-param pos="4"/>
  </call-macro>  
      <call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-sup_adj-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-sup_adj-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor suputed from possessive determiner -->
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
           <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->

        <out>
          <chunk name="prep-detart-sup_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
         <b pos="1"/>
           <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-sup_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
              <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
           
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-sup_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>
           <b pos="1"/> 
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
           <chunk name="prep-detart-sup_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
            <b pos="2"/>
             <lu>
          <lit v="ең"/>
          <lit-tag v="adv"/> 
             </lu>
          <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
              
            </lu>
            <b/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
           
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>
<!--in the most beautiful garden -->

<rule comment="NEW RULE: prep the most adjec noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="the-most"/>
    <pattern-item n="non-sup-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<!--
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
-->
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="4"/>
     </call-macro>
<!--
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
--><call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-the_most_adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
        <lu>  
              <lit v="ең"/>
               <lit-tag v="adv"/>
            </lu>
 <b pos="2"/>

            <lu>  
               <var n="adjec_lu"/>
            </lu>
 <b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-the_most_adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
<b pos="1"/> 
  <lu>  
              <lit v="ең"/>
               <lit-tag v="adv"/>
            </lu>
<b pos="2"/>
 <lu>  
               <var n="adjec_lu"/>
            </lu>
 <b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>


<!-- in the more beautiful garden-->

<rule comment="NEW RULE: prep det more adjec noun">  

  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
     <pattern-item n="more"/>
    <pattern-item n="non-sup-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="5"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5">
    <with-param pos="5"/>
  </call-macro>  
 <call-macro n="build-adjec-lu">
    <with-param pos="4"/>
  </call-macro>  
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-more_adj-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="5" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
             <b pos="1"/>
             <b pos="2"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
                <lit-tag v="comp"/>
            </lu>
            <b pos="4"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-more_adj-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <b pos="2"/>
            <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="3"/>
            <lu>
               <var n="adjec_lu"/>
                <lit-tag v="comp"/>
            </lu>
              <b pos="4"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->

        <out>
          <chunk name="prep-detart-more_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
         <b pos="1"/>
         <b pos="2"/>
            <b pos="3"/>        
             <lu>
               <var n="adjec_lu"/>
                <lit-tag v="comp"/>
            </lu>
            <b pos="4"/>        
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-more_adj-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
             <b pos="1"/>
             <b pos="2"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="3"/>
             <lu>
               <var n="adjec_lu"/>
                <lit-tag v="comp"/>
            </lu>
            <b pos="4"/>      
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-more_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>
           <b pos="1"/> 
           <b pos="2"/>
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
           <b pos="3"/>
                <lu>
               <var n="adjec_lu"/>
                <lit-tag v="comp"/>
            </lu>
            <b pos="4"/>          
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
           <chunk name="prep-detart-more_adj-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="5" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
            <b pos="3"/>
           <lu>
                        <var n="adjec_lu"/> 
                <lit-tag v="comp"/>
            </lu>
            <b pos="4"/>
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>





<rule comment="NEW RULE: prep det adjec noun">  
<!-- explicit superblank management -->
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
     <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="4"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5">
    <with-param pos="4"/>
  </call-macro>  
 <call-macro n="build-adjec-lu">
    <with-param pos="3"/>
  </call-macro>  
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
            <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="2"/>
            <lu>
               <var n="adjec_lu"/>
            </lu>
              <b pos="3"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->

        <out>
          <chunk name="prep-detart-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
         <b pos="1"/>
         <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>        
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
             <b pos="1"/>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b pos="2"/>
             <lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>      
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>
           <b pos="1"/> 
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
           <b pos="2"/>
                <lu>
               <var n="adjec_lu"/>
            </lu>
            <b pos="3"/>          
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
           <chunk name="prep-detart-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
           <lu>
                        <var n="adjec_lu"/> 
            </lu>
            <b pos="3"/>
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: prep det num noun">  
<!-- in these and many other prep rules, the case of the chunk is wrong, as it is set to the case computed for the noun: 
this would have to be changed -->
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
 <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition2"><with-param pos="1"/><with-param pos="4"/></call-macro>
  <call-macro n="NEW-build-noun-lu-2-4-5-sg">
    <with-param pos="4"/>
  </call-macro>  
 <call-macro n="build-num-lu">
    <with-param pos="3"/>
  </call-macro>  
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-noun">
             <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>   
             </tags>
      <b pos="1"/>		
            <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
            <b pos="2"/>
 		<lu>
               <var n="num_lu"/>
            </lu>
             <b pos="3"/>
             <lu>
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-noun">
            <tags>
                 <tag><var n="pptag"/></tag>
                 <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
                 <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
                 <tag><var n="possessive"/></tag> 
                 <tag><var n="case"/></tag> <!-- case placeholder -->
            </tags>
            <b pos="1"/>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="2"/>
            <lu>
               <var n="num_lu"/>
            </lu>
              <b pos="3"/>
              <lu> 
                <var n="NEW-noun_lu"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-detart-num-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>  
         <b pos="1"/>
         <b pos="2"/>
             <lu>
               <var n="num_lu"/>
            </lu>
            <b pos="3"/>        
            <lu>  
               <var n="NEW-noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-detdem-num-noun">
          <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
         </tags>    
         <b pos="1"/>

              <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
          <b pos="2"/>   
          <lu>
               <var n="num_lu"/>
            </lu>
              <b pos="3"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
          <call-macro n="build-possessive-from-possessive-determiner">
              <with-param pos="2"/>
           </call-macro>
           <out>
            <chunk name="prep-detpos-num-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><var n="possessive"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags> 
           <b pos="1"/>
             <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            <b pos="2"/>          
                <lu>
               <var n="num_lu"/>
            </lu>
             <b pos="3"/>
             <lu>  
                <var n="NEW-noun_lu"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-detart-num-noun">
           <tags>
             <tag><var n="pptag"/></tag>
             <tag><clip pos="4" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
             <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
             <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
             <tag><var n="case"/></tag> <!-- case placeholder -->
           </tags>  
           <b pos="1"/>
           <b pos="2"/>
               <lu>
               <var n="num_lu"/>
            </lu>
            <b pos="3"/> 
              <lu>  
                 <var n="NEW-noun_lu"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
  </action>
</rule>


<rule comment="NEW RULE: det noun"> 
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5">
      <with-param pos="2"/>
    </call-macro>
    

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
      <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
    <b pos="1"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <call-macro n="process-preblank-1">
       <with-param pos="1"/>
       <with-param pos="2"/>
    </call-macro>
    <out>
    <chunk name="detart-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="2" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

<!--    <b pos="1"/> -->
     <var n="preblank-1"/>
     <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>

  

<rule comment="NEW RULE: sup-adjec">  
  <pattern>
    <pattern-item n="sup-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="sup-adjec">
    <tags>
    <tag><lit-tag v="SupP"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
       <lit v="ең"/>
       <lit-tag v="adv"/>
    </lu>
    <b/>
    <lu>
       <clip pos="1" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="subst"/>
       <lit-tag v="2"/>
       <lit-tag v="3"/>       
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: sup-adjec">  
  <pattern>
    <pattern-item n="the"/>
    <pattern-item n="sup-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="sup-adjec">
    <tags>
    <tag><lit-tag v="SupP"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <b pos="1"/>
    <lu>
       <lit v="ең"/>
       <lit-tag v="adv"/>
    </lu>
    <b/>
    <lu>
       <clip pos="2" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="subst"/>
       <lit-tag v="2"/>
       <lit-tag v="3"/>       
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: noun">  
  <pattern>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="NEW-build-noun-lu-2-4-5">
       <with-param pos="1"/>
  </call-macro> 
    <out>
    <chunk name="noun">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <var n="NEW-noun_lu"/>
    </lu>
    </chunk>
    </out>
  </action>
</rule>

  
<rule comment="NEW RULE: det adjec noun"> 
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="NEW-build-noun-lu-2-4-5">
      <with-param pos="3"/>
    </call-macro>
     <call-macro n="build-adjec-lu">
      <with-param pos="2"/>
    </call-macro>

<!-- *** -->

<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="detdem-adjec-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>

      <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
     	<b pos="1"/>
   <lu>  
      <var n="adjec_lu"/>
     </lu>
     <b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <call-macro n="build-possessive-from-possessive-determiner">
       <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="detpos-adjec-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><var n="possessive"/></tag> <!-- possessor computed from possessive determiner -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
<lu> 
      <var n="adjec_lu"/>
     </lu>
<b pos="2"/>
    <lu> 
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="detart-adjec-nom">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="3" side="sl" part="a_nbr"/></tag> <!-- number placeholder -->
    <tag><lit-tag v="p3"/></tag> <!-- person placeholder -->
    <tag><lit-tag v="PXD"/></tag> <!-- possessor placeholder -->
    <tag><lit-tag v="CD"/></tag> <!-- case placeholder -->
    </tags>
    <b pos="1"/>
 <lu>  
      <var n="adjec_lu"/>
     </lu>
<b pos="2"/>
    <lu>  
      <var n="NEW-noun_lu"/>
     </lu>
    </chunk>
    </out>
  </otherwise>
</choose>
  </action>
</rule>



<rule comment="NEW RULE: prep adjec noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<!--
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
-->
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="3"/>
     </call-macro>
<!--
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
--><call-macro n="build-adjec-lu"><with-param pos="2"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
            <lu>  
               <var n="adjec_lu"/>
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
<b pos="1"/> 
 <lu>  
               <var n="adjec_lu"/>
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>

<!-- of bigger garden-->
<rule comment="NEW RULE: prep comp-adjec noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="comp-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
<!--
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
-->
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="3"/>
     </call-macro>
<!--
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
--><call-macro n="build-adjec-lu"><with-param pos="2"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-comp_adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
            <lu>  
               <var n="adjec_lu"/>
             <lit-tag v="comp"/>
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-comp_adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="3" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
<b pos="1"/> 
 <lu>  
               <var n="adjec_lu"/>
    <lit-tag v="comp"/>
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="3" side="tl" part="lem"/> 
               <clip pos="3" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>




<rule comment="NEW RULE: prep more adjec noun"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="more"/>
    <pattern-item n="non-sup-adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
     <call-macro n="choose_case_and_postposition2">
        <with-param pos="1"/>
        <with-param pos="4"/>
     </call-macro>
<call-macro n="build-adjec-lu"><with-param pos="3"/></call-macro> 
 
     <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
 <b pos="1"/>
            <lu>  
               <var n="adjec_lu"/>
               <lit-tag v="comp"/>
              
            </lu>
 <b pos="2"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          <b pos="3"/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
                <tag><clip pos="4" part="a_nbr" side="sl"/></tag> <!-- number -->
                <tag><lit-tag v="p3"/></tag> <!-- person is 3 for nouns -->
                <tag><lit-tag v="PXD"/></tag> <!-- just in case -->
                <tag><var n="case"/></tag>       
            </tags>
<b pos="1"/> 
 <b pos="2"/>
 <lu>  
               <var n="adjec_lu"/>
             <lit-tag v="comp"/>
            </lu>
 <b pos="3"/>
            <lu>  <!-- build in situ for the time being -->
               <clip pos="4" side="tl" part="lem"/> 
               <clip pos="4" side="tl" part="a_nom"/>
               <lit-tag v="2"/> <!-- number -->
               <!-- no need to link person -->
               <lit-tag v="4"/> <!-- for possessive, just in case -->
               <lit-tag v="5"/> <!-- for case -->
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
  </action>
</rule>




<rule comment="RULE: obj-pron">
  <pattern>
    <pattern-item n="obj-pron"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test>
       <equal>
         <clip pos="1" side="sl" part="a_nbr"/>
         <lit-tag v="sp"/>
       </equal>
      </test>
       <let><var n="number"/><lit-tag v="sg"/></let> <!-- choosing singular in the absence of information -->
    </when>
       <otherwise>
         <let>
           <var n="number"/><clip pos="1" side="tl" part="a_nbr"/>
         </let>
       </otherwise>
  </choose>
  <choose>
    <when>
     <test>  
       <equal>
          <clip pos="1" side="sl" part="a_pers"/>
          <lit-tag v="p2"/>
       </equal>
     </test>
     <let><var n="formality"/><lit-tag v="frm"/></let>
    </when>
     <otherwise>
     <let><var n="formality"/><lit v=""/></let>
     </otherwise>
  </choose>
  <call-macro n="initialize_case_to_nominative"/> <!-- will set it to nominative -->
   <out>
   <chunk name="obj-pron">
   <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><var n="number"/></tag>
    <tag><clip pos="1" side="sl" part="a_pers"/></tag> <!-- Formality 2nd will be set in .t4x -->
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
     
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_kaz_perspron"/>
      <clip pos="1" side="tl" part="a_pers"/>
      <lit-tag v="2"/> <!-- number -->
      <lit-tag v="4"/> <!-- possession -->
      <lit-tag v="5"/> <!-- case --> 
    </lu>
  </chunk>
  </out>
 </action>
</rule>
 

<rule comment="NEW RULE: subj-pron">
  <pattern>
    <pattern-item n="subj-pron"/>
  </pattern>
  <action>
<!--<call-macro n="change-case">   change case  "I"
<with-param pos="1"/>
  </call-macro> -->
  <choose>
    <when>
      <test>
       <equal>
         <clip pos="1" side="sl" part="a_nbr"/>
         <lit-tag v="sp"/>
       </equal>
      </test>
       <let><var n="number"/><lit-tag v="sg"/></let> <!-- choosing singular in the absence of information -->
    </when>
       <otherwise>
         <let>
           <var n="number"/><clip pos="1" side="tl" part="a_nbr"/>
         </let>
       </otherwise>
  </choose>
  <choose>
    <when>
     <test>  
       <equal>
          <clip pos="1" side="sl" part="a_pers"/>
          <lit-tag v="p2"/>
       </equal>
     </test>
     <let><var n="formality"/><lit-tag v="frm"/></let>
    </when>
     <otherwise>
     <let><var n="formality"/><lit v="FD"/></let>
     </otherwise>
  </choose>
  <call-macro n="initialize_case_to_nominative"/> <!-- will set it to nominative -->
  <out>
   <chunk name="subj-pron" case="caseFirstWord">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><var n="number"/></tag>
    <tag><clip pos="1" side="sl" part="a_pers"/></tag> <!-- Formality 2nd will be set in .t4x -->
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
     
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_kaz_perspron"/>
      <clip pos="1" side="tl" part="a_pers"/>
      <lit-tag v="2"/> <!-- number -->
      <lit-tag v="4"/> <!-- possession -->
      <lit-tag v="5"/> <!-- case -->
    </lu>
  </chunk>
  </out>
 </action>
</rule>

<rule comment="NEW RULE: pron-dem">
  <pattern>

<pattern-item n="pron-neg"/>
  </pattern>
    <action>
<call-macro n="build-pron-lu"><with-param pos="1"/></call-macro> 
<choose>

  <when>
        <test>
          <in caseless="yes">
      <clip pos="1" side="sl" part="lem"/>
      <list n="negative_pron"/>
   </in>
        </test>
    <out>
    <chunk name="pron">
    <tags>
    <tag><lit-tag v="NP_pron_neg"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag>
    <tag><lit-tag v="p3"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
      <var n="pron_lu"/>
     </lu>
    </chunk>

</out>
</when>
<otherwise>
 <out>
    <chunk name="pron">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag>
    <tag><lit-tag v="p3"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
      <var n="pron_lu"/>
     </lu>
    </chunk>
    </out>
</otherwise>
</choose>
  </action>
</rule>



<!--
<rule comment="NEW RULE: pron-dem">
  <pattern>
    <pattern-item n="pron-dem"/>
  </pattern>
    <action>

 <call-macro n="build-pron-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="pron">
    <tags>
    <tag><lit-tag v="NP"/></tag>
    <tag><clip pos="1" side="sl" part="a_nbr"/></tag>
    <tag><lit-tag v="p3"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
      <var n="pron_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>
-->




 
    <rule comment="REGLA: SENT">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <let> <!-- approx: assign 3rd person singular for verbs -->
          <var n="verb-pers"/>
          <lit-tag v="p3"/>
        </let>
        <let>
          <var n="verb-nbr"/>
          <lit-tag v="sg"/>
        </let>
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>





<rule comment="NEW RULE: the-most adjec">   <!-- another rule is needed for the most ADJ -->
  <pattern>
    <pattern-item n="the-most"/>
    <pattern-item n="non-sup-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="sup-adjec">
    <tags>
    <tag><lit-tag v="SupP"/></tag>
    <tag><lit-tag v="PXD"/></tag>
    <tag><lit-tag v="CD"/></tag>
    </tags>
    <lu>
       <lit v="ең"/>
       <lit-tag v="adv"/>
    </lu>
    <b pos="1"/>
    <lu>
       <clip pos="2" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="subst"/>
       <lit-tag v="2"/>
       <lit-tag v="3"/>       
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: the adjec+comp">   <!-- bigger, for adj comp -->
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="comp-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="comp-adjec">
    <tags>
    <tag><lit-tag v="AdjP"/></tag> <!-- no tags, regular AdjP -->
    </tags>
   <b pos="1"/> 
    <lu>
       <clip pos="2" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="comp"/>
         
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: more adjec">   <!-- more beautiful, for sint adj comp -->
  <pattern>
    <pattern-item n="more"/>
    <pattern-item n="non-sup-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="comp-adjec">
    <tags>
    <tag><lit-tag v="AdjP"/></tag> <!-- no tags, regular AdjP -->
    </tags>
    <b pos="1"/>
    <lu>
       <clip pos="2" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="comp"/>
         
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE:the more adjec">   <!-- the more beautiful, for sint adj comp -->
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="more"/>
    <pattern-item n="non-sup-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="comp-adjec">
    <tags>
    <tag><lit-tag v="AdjP"/></tag> <!-- no tags, regular AdjP -->
    </tags>
    <b pos="1"/>
 <b pos="2"/>
    <lu>
       <clip pos="3" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="comp"/>
         
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: adjec+comp">   <!-- bigger, for adj comp -->
  <pattern>
    <pattern-item n="comp-adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="comp-adjec">
    <tags>
    <tag><lit-tag v="AdjP"/></tag> <!-- no tags, regular AdjP -->
    </tags>
   
    <lu>
       <clip pos="1" part="lem" side="tl"/>
       <lit-tag v="adj"/>
       <lit-tag v="comp"/>
         
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: adjec">  
  <pattern>
    <pattern-item n="non-sup-adjec"/>
  </pattern>
  <action>
   <call-macro n="build-adjec-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="adjec">
    <tags>
    <tag><lit-tag v="AdjP"/></tag>
    </tags>
    <lu>
      <var n="adjec_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE:adv adv">  
  <pattern>
 <pattern-item n="preadv"/>
    <pattern-item n="adv"/>
  </pattern>
  <action>
    <out>
    <chunk name="adv">
    <tags>
    <tag><lit-tag v="AdvP"/></tag>
    </tags>
	<b pos="1"/>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
	<b/>

    <lu>
      <clip pos="2" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>



<rule comment="NEW RULE: which house what house"> <!-- + noun-->  
  <pattern>
    <pattern-item n="adv-itg"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
 <call-macro n="change-case"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="adv-itg">
    <tags>
    <tag><lit-tag v="QAdvP"/></tag>
    </tags>
 <b pos="1"/>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
<b/>
  <lu>
               <clip pos="2" side="tl" part="lem"/> 
               <clip pos="2" side="tl" part="a_nom"/>
               <lit-tag v="acc"/>
 </lu>
    </chunk>
    </out>
  </action>
</rule>



<rule comment="NEW RULE: adv-itg"> <!-- when/where/why-->  
  <pattern>
    <pattern-item n="adv-itg"/>
  </pattern>
  <action>
 <call-macro n="change-case"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="adv-itg">
    <tags>
    <tag><lit-tag v="QAdvP"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>




<rule comment="NEW RULE: adv">  
  <pattern>
    <pattern-item n="adv"/>
  </pattern>
  <action>
    <out>
    <chunk name="adv">
    <tags>
    <tag><lit-tag v="AdvP"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>




<rule comment="NEW RULE: preadv">  
  <pattern>
    <pattern-item n="preadv"/>
  </pattern>
  <action>
    <out>
    <chunk name="preadv">
    <tags>
    <tag><lit-tag v="AdvP"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: num">  
  <pattern>
    <pattern-item n="num"/>
  </pattern>
  <action>
   <call-macro n="build-num-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="NP">
    <tags>
    <tag><lit-tag v="num"/></tag>
    </tags>
    <lu>
      <var n="num_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: cnjadv">  
  <pattern>
    <pattern-item n="cnjadv"/>
  </pattern>
  <action>
   <call-macro n="build-cnjadv-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="if">
    <tags>
  <tag><lit-tag v="IF"/></tag>
    <tag><lit-tag v="cnjsub"/></tag>
    </tags>
    <lu>
      <var n="cnjadv_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="NEW RULE: cnjcoo">  
  <pattern>
    <pattern-item n="cnjcoo"/>
  </pattern>
  <action>
   <call-macro n="build-cnjcoo-lu"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="than">
    <tags>
  <tag><lit-tag v="THAN"/></tag>
    <tag><lit-tag v="post"/></tag>
    </tags>
    <lu>
      <var n="cnjcoo_lu"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: Rel which">  
  <pattern>
    <pattern-item n="rel"/>
  </pattern>
  <action>
 
    <out>
    <chunk name="rel">
    <tags>
  <tag><lit-tag v="Rel"/></tag>
    </tags>
    <lu>
 <clip pos="1" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE:adv adj">    <!--very large-->
  <pattern>
 <pattern-item n="preadv"/>
    <pattern-item n="adjec"/>
  </pattern>
  <action>
    <out>
    <chunk name="adv">
    <tags>
    <tag><lit-tag v="AdjP"/></tag>
    </tags>
	<b pos="1"/>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
     </lu>
	<b/>
    <lu>
      <clip pos="2" side="tl" part="whole"/>
     </lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="NEW RULE: infinitive - verb"> 
  <pattern>
    <pattern-item n="approx-inf-verb"/>
  </pattern>
  <action>
     <let><var n="tense"/><lit-tag v="aor"/></let> 
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
 
  </action>
</rule>


<rule comment="NEW RULE: vbser- verb"> 
  <pattern>
    <pattern-item n="verb-pp"/>
  </pattern>
  <action>
     <let><var n="tense"/><lit-tag v="past"/></let> 
      <call-macro n="NEW-gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
 
  </action>
</rule>




  </section-rules>
</transfer>

