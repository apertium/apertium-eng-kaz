<?xml version="1.0" encoding="UTF-8"?>
<!-- <!DOCTYPE transfer SYSTEM "transfer.dtd"> -->
<!-- -*- sgml -*- -->
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="pers-verb"> <!-- past and present tense -->
      <cat-item tags="vblex.pres.*"/>
      <cat-item tags="vblex.pres"/>
      <cat-item tags="vblex.past"/>
    </def-cat>   
    <def-cat n="approx-inf-verb"> <!-- infinitive and present where infinitive should have been found (tagger error) -->
      <cat-item tags="vblex.inf"/> <!-- This may be dangerous and should be treated at tagger level -->
      <cat-item tags="vblex.pres"/>
    </def-cat>
    <def-cat n="vaux-will"> <!-- future -->
      <cat-item lemma="will" tags="vaux.inf"/>
    </def-cat>
    <def-cat n="pers-verb-to-be"> <!-- past and present tense -->
      <cat-item tags="vbser.pres"/>
      <cat-item tags="vbser.pres.*"/>
      <cat-item tags="vbser.past.*"/>
      <cat-item tags="vbser.past"/>
    </def-cat>
    <def-cat n="verb-ing"> <!-- past and present tense -->
      <cat-item tags="vblex.ger"/>
<!--      <cat-item tags="vbser.ger"/>
      <cat-item tags="vbhaver.ger"/>
      <cat-item tags="vbmod.ger"/>  --> <!-- We'll try later -->
   </def-cat>   
    <def-cat n="nom">
      <cat-item tags="n.*"/>
      <cat-item tags="np.ant.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
     </def-cat>
    <def-cat n="adjec">
      <cat-item tags="adj.*"/>
      <cat-item tags="adj"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det.def.*"/>
      <cat-item tags="det.ind.*"/>
      <cat-item tags="det.pos.*"/>
      <cat-item tags="det.dem.*"/>
    </def-cat>
    <def-cat n="prep">
      <cat-item tags="pr"/>
     </def-cat>
 

    <def-cat n="subj-pron">
       <cat-item tags="prn.subj.*"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="sent"/>
    </def-cat>
    <def-cat n="possessive"> <!-- check if complete -->
      <cat-item tags="PXD"/> <!-- to be determined -->
      <cat-item tags="px3sp"/>
      <cat-item tags="px1sg"/>
      <cat-item tags="px2sg"/>
      <cat-item tags="px1pl"/>
      <cat-item tags="px2pl"/>
    </def-cat>



   
  </section-def-cats>
 
  <section-def-attrs>
    <def-attr n="a_tense">
      <attr-item tags="pres"/>
      <attr-item tags="past"/>
    </def-attr> 
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np.ant"/>
    </def-attr>
     <def-attr n="a_num">
      <attr-item tags="num"/>
    </def-attr>
    <def-attr n="a_gen">
      <attr-item tags="f"/>
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
    </def-attr>
    <def-attr n="a_pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_kaz_verb"> 
      <attr-item tags="v.tv"/>
      <attr-item tags="v.iv"/>
    </def-attr>
    <def-attr n="a_kaz_perspron"> 
      <attr-item tags="prn.pers"/>
    </def-attr>
    <def-attr n="a_cas">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="dat"/>
      <attr-item tags="gen"/>
      <attr-item tags="loc"/>
      <attr-item tags="ins"/>
      <attr-item tags="abl"/>
    </def-attr>
    <def-attr n="a_Rcas">
      <attr-item tags="Rnom"/>
      <attr-item tags="Racc"/>
      <attr-item tags="Rdat"/>
      <attr-item tags="Rgen"/>
      <attr-item tags="Rloc"/>
      <attr-item tags="Rins"/>
      <attr-item tags="Rabl"/>
    </def-attr>
    <def-attr n="a_possessive"> <!-- check if complete -->
      <attr-item tags="PXD"/> <!-- to be determined -->
      <attr-item tags="px3sp"/>
      <attr-item tags="px1sg"/>
      <attr-item tags="px2sg"/>
      <attr-item tags="px1pl"/>
      <attr-item tags="px2pl"/>
    </def-attr>
    <def-attr n="a_postposition"> <!-- Kazakh postposition indicators -->
      <attr-item tags="n"/> 
      <attr-item tags="post"/>
    </def-attr>
    <def-attr n="a_det">  <!-- determiner tag -->
      <attr-item tags="det"/>
    </def-attr>
    <def-attr n="a_dem">  <!-- demonstrative tag -->
      <attr-item tags="dem"/>
    </def-attr>
    <def-attr n="a_pos">  <!-- possessive tag -->
      <attr-item tags="pos"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="number"/>
    <def-var n="current_verb"/>
    <def-var n="plural"/>
    <def-var n="case"/>
    <def-var n="tense"/>
    <def-var n="verb-pers"/> <!-- State variable -->
    <def-var n="verb-nbr"/> <!-- State variable -->
    <def-var n="formality"/> <!-- Used to generate formal versions of 2nd person pronouns -->
    <def-var n="pptag"/> <!-- Will contain the tag of the next postpositional phrase generated (AdvP, AdjP, etc.) -->

    <def-var n="genpp"/> <!-- yes: will generate postposition; no= won't -->
    <def-var n="pplemma"/> <!-- lemma of postpostion -->
    <def-var n="ppcat"/> <!-- category of postposition -->
    <def-var n="ppinfl"/> <!-- inflexion information for postposition -->
    <def-var n="postposition_lu"/> <!-- complete postposition ready for lu -->        
    <def-var n="noun_lu"/> <!-- complete noun in prep X rules, ready for lu -->
    <def-var n="noun_lu_with_poss"/> <!-- same, with possessive -->
    <def-var n="np-poss"/> <!-- possessive for noun_lu_with_poss -->
    <def-var n="poss-frm"/> <!-- formality for possessives -->
    
  </section-def-vars>


  <section-def-macros>

    <def-macro n="out-blank-if-not-single-space" npar="1">
<!-- Outputs nothing if the blank is " " and the blank otherwise..-->
<!-- Takes one position parameter -->
      <choose>
        <when>
          <test>
            <not>
              <equal>
                <b pos="1"/>
                <lit v=" "/>
              </equal>
            </not>
          </test>
          <out>
            <b pos="1"/>
          </out>
        </when>
      </choose>
    </def-macro>


    <def-macro n="initialize_number" npar="0">
          <let>
            <var n="number"/>
            <lit v=""/>
          </let>
    </def-macro>

    <def-macro n="initialize_case_to_nominative" npar="0">
          <let>
            <var n="case"/>
            <lit-tag v="nom"/>
          </let>
    </def-macro>

    <def-macro n="assign-tl-plural-if-sl-nbr-plural" npar="1">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" side="sl" part="a_nbr"/>
              <lit-tag v="pl"/>
            </equal>
          </test>
          <let><var n="number"/><lit-tag v="pl"/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="choose_case_and_postposition" npar="1">  
    <let><var n="pptag"/><lit-tag v="AdvP"/></let> <!-- for most of them -->
    <let><var n="genpp"/><lit v="no"/></let> <!-- for simple cases -->

    <choose>
      <when> <!-- make genpp="yes" when a postposition is detected -->
        <test>
          <or>
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="n"/>
            </equal>
            <equal>
               <clip pos="1" side="tl" part="a_postposition"/>
               <lit-tag v="post"/>
            </equal>
          </or>  
        </test>
        <let><var n="genpp"/><lit v="yes"/></let> <!-- for simple cases -->
      </when>
    </choose>

    <choose>
      <when>
        <test>
          <equal><var n="genpp"/><lit v="no"/></equal>
        </test>
        <choose> <!-- no postpositions -->
          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="in"/>
              </equal>
            </test>
            <let>
               <var n="case"/>
               <lit-tag v="loc"/>
            </let>
 	  </when> 

      <when>   <!-- at and in have the same translation: locative -->
        <test>
          <equal caseless="yes">
            <clip pos="1" side="sl" part="lem"/>
            <lit v="at"/>
          </equal>
        </test>
        <let>
          <var n="case"/>
          <lit-tag v="loc"/>
        </let>
	</when> 
  
           <when> 
             <test>
               <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="from"/>
               </equal>
             </test>
             <let>
                <var n="case"/>
                <lit-tag v="abl"/>
             </let>
	   </when>    

          <when> 
            <test>
              <equal caseless="yes">
                <clip pos="1" side="sl" part="lem"/>
                <lit v="to"/>
              </equal>
            </test>
            <let>
              <var n="case"/>
              <lit-tag v="dat"/>
            </let>
	  </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="with"/>
                </equal>
             </test>
             <let>
               <var n="case"/>
               <lit-tag v="ins"/>
             </let>
       	   </when>    

           <when> 
             <test>
                <equal caseless="yes">
                  <clip pos="1" side="sl" part="lem"/>
                  <lit v="of"/>
                 </equal>
              </test>
              <let>
                <var n="case"/>
                <lit-tag v="gen"/>
              </let>
              <let>
                 <var n="pptag"/>
                 <lit-tag v="AdjP"/>   <!-- MLF20120628 could be genP in the future -->
              </let>
	   </when>    

           <otherwise>
              <let>
                <var n="case"/>
                <lit-tag v="ins"/> <!-- Choice when we don't know the translation of the preposition, can be improved -->
              </let>
              <let>
                <var n="pptag"/>
                <lit-tag v="AdvP"/>   <!-- MLF20120628 could be genP in the future -->
              </let>
            </otherwise>
	</choose>
      </when> <!-- End of solutions without postpositions -->

      <when>  <!--- Now, with postpositions -->
        <test>
          <equal>
             <var n="genpp"/>
             <lit v="yes"/>
          </equal>
        </test>
        <choose> <!-- Generate postposition --> 
          <when> <!-- noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="n"/>
	       </equal>
             </test>
             <let><var n="case"/><lit-tag v="gen"/></let>
             <let><var n="pptag"/><lit-tag v="AdvP"/></let>
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="n"/>
                        <lit-tag v="px3sp"/>
        		<clip part="a_cas" side="tl" pos="1"/> 
                      </concat>
             </let>
	  </when>
          <when> <!-- non-noun-based postpositions -->
             <test>
               <equal>
                 <clip side="tl" part="a_postposition" pos="1"/>
                 <lit-tag v="post"/>
	       </equal>
             </test>
             <choose>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rnom"/></equal></test>
                   <let><var n="case"/><lit-tag v="nom"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rdat"/></equal></test>
                   <let><var n="case"/><lit-tag v="dat"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rabl"/></equal></test>
                   <let><var n="case"/><lit-tag v="abl"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rloc"/></equal></test>
                   <let><var n="case"/><lit-tag v="loc"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rins"/></equal></test>
                   <let><var n="case"/><lit-tag v="ins"/></let>
                </when>
                <when>
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Racc"/></equal></test>
                   <let><var n="case"/><lit-tag v="acc"/></let>
                </when>
                <when> <!-- This case is unlikely, but we'll leave it just in case -->
                   <test><equal><clip part="a_Rcas" pos="1" side="tl"/><lit-tag v="Rgen"/></equal></test>
                   <let><var n="case"/><lit-tag v="gen"/></let>
                </when>
             </choose>
             <let><var n="pptag"/><lit-tag v="AdvP"/></let>
             <let><var n="postposition_lu"/> <!-- ready for lu -->
                      <concat>
                        <clip pos="1" side="tl" part="lem"/>
                        <lit-tag v="post"/>
                      </concat>
             </let>
	  </when>
	</choose>
       </when>
     </choose>
    </def-macro>


<def-macro n="gen-simple-verb" npar="1">
    <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="SV"/></tag>
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <var n="tense"/>
          <var n="verb-pers"/>
          <var n="formality"/>		
          <var n="verb-nbr"/>
        </lu>
      </chunk>
    </out>
</def-macro>


<def-macro n="default-nbr-pers" npar="0">
    <choose>
     <when>
       <test>
         <equal><var n="verb-pers"/><lit v=""/></equal></test>
      <let>
          <var n="verb-pers"/><lit-tag v="p3"/>
      </let>
     </when>
    </choose>
    <choose>
     <when>
       <test>
         <equal><var n="verb-nbr"/><lit v=""/></equal></test>
      <let>
          <var n="verb-nbr"/><lit-tag v="sg"/>
      </let>
     </when>
    </choose>
</def-macro>    


<!-- The build-noun-lu will not be used when all prep X rules are converted -->
<def-macro n="build-noun-lu" npar="1"> 
     <let>
           <var n="noun_lu"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <var n="number"/> 
               <var n="case"/>
           </concat>  
        </let>

</def-macro>

<!-- This should be called build-noun-lu when all prep X rules are converted -->
<def-macro n="build-noun-lu-with-possessive" npar="2">
     <let><var n="poss-frm"/><lit v=""/></let>
     <choose>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="my"/></equal></test> <let><var n="np-poss"/><lit-tag v="px1sg"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="our"/></equal></test> <let><var n="np-poss"/><lit-tag v="px1pl"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="your"/></equal></test> <let><var n="np-poss"/><lit-tag v="px2sg"/></let>
             <let><var n="poss-frm"/><lit-tag v="frm"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="his"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="her"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="its"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
       <when><test><equal caseless="yes"><clip pos="2" side="sl" part="lem"/><lit v="their"/></equal></test> <let><var n="np-poss"/><lit-tag v="px3sp"/></let></when>
      <otherwise><let><var n="np-poss"/><lit v=""/></let></otherwise>
     </choose>
     <let>
           <var n="noun_lu_with_poss"/>
           <concat>
             <clip pos="1" side="tl" part="lem"/> 
               <clip pos="1" side="tl" part="a_nom"/>
               <var n="number"/> 
               <var n="np-poss"/>
               <var n="poss-frm"/>
               <var n="case"/>
           </concat>  
        </let>

</def-macro>

</section-def-macros>


<section-rules>

<rule comment="RULE: verb"> 
  <pattern>
    <pattern-item n="pers-verb"/>
  </pattern>
  <action>
     <call-macro n="default-nbr-pers"/>
    <choose>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="pres"/></let> 
    <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="SV"/></tag>
      </tags>
        <lu>
          <clip pos="1" side="tl" part="lem"/>
	  <clip pos="1" side="tl" part="a_kaz_verb"/>
          <lit-tag v="aor"/>
          <var n="verb-pers"/>	
          <var n="formality"/>	
          <var n="verb-nbr"/>
        </lu>
      </chunk>
        </out>
      </when>

      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="ifi"/></let>
      <call-macro n="gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </when>

      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let>
      <call-macro n="gen-simple-verb">
         <with-param pos="1"/> 
     </call-macro>
      </otherwise> 
    </choose>
  </action>
</rule>

<rule comment="RULE: be + verb-ing"> <!-- first attempt at "ing" verbal forms -->
  <pattern>
    <pattern-item n="pers-verb-to-be"/>
    <pattern-item n="verb-ing"/> <!-- * -->
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
    <choose>
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="pres"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="pres"/></let>
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="SV"/></tag>
      </tags>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b pos="1"/> <!-- this position is probably not optimal -->
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <var n="tense"/>
          <var n="verb-pers"/>	
          <var n="verb-nbr"/>
        </lu>
      </chunk>
        </out>
      </when> 
      <when>
        <test>
          <equal>
             <clip pos="1" side="sl" part="a_tense"/>
             <lit-tag v="past"/>
          </equal>
        </test>
        <let><var n="tense"/><lit-tag v="past"/></let>
<!--call-macro n="gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro> -->
        <out>
      <chunk name="pers-verb">
      <tags>
        <tag><lit-tag v="SV"/></tag>
      </tags>
        <lu>
          <clip pos="2" side="tl" part="lem"/>
	  <clip pos="2" side="tl" part="a_kaz_verb"/>
          <lit-tag v="prc_perf"/>
        </lu>
        <b pos="1"/> <!-- this position is probably not optimal -->
        <lu>
          <lit v="отыр"/>
          <lit-tag v="vaux"/>
          <lit-tag v="ifi"/>
          <var n="verb-pers"/>	
          <var n="verb-nbr"/>
        </lu>
      </chunk>
        </out>
      </when>
      <otherwise>
        <let><var n="tense"/><lit-tag v="aor"/></let> <!-- This is clearly wrong but we'll change it later -->
      <call-macro n="gen-simple-verb">
         <with-param pos="2"/> 
     </call-macro>
      </otherwise> 
    </choose>

  </action>
</rule>





<rule comment="RULE: will + verb"> <!-- will verb -->
  <pattern>
    <pattern-item n="vaux-will"/>
    <pattern-item n="approx-inf-verb"/> <!-- MLF 20120618 this to catch tagger errors, should be solved there not here! -->
   </pattern>
  <action>
    <call-macro n="default-nbr-pers"/>
    <let><var n="tense"/><lit-tag v="aor"/></let>
    <call-macro n="gen-simple-verb">
         <with-param pos="2"/> 
    </call-macro>   
  </action>
</rule>
    

<rule comment="RULE: prep nom"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
     <call-macro n="choose_case_and_postposition">
        <with-param pos="1"/>
     </call-macro>
      <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
            <lu>  
               <var n="noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
      </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
            <lu>  
               <var n="noun_lu"/>
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space">
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>



    
<rule comment="RULE: adjec nom"> 
  <pattern>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
    <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
    <call-macro n="initialize_case_to_nominative"/>
    <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
    <out>
      <chunk name="adjec-nom">
      <tags>
        <tag><lit-tag v="SN"/></tag>
      </tags>
      <lu><clip pos="1" side="tl" part="whole"/></lu>
      <b pos="1"/>
      <lu><var n="noun_lu"/></lu>
      </chunk>
    </out>
  </action>
</rule>
 
<rule comment="RULE: num nom"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
     <call-macro n="initialize_case_to_nominative"/>
     <call-macro n="build-noun-lu"><with-param pos="2"/></call-macro>
    <out>
    <chunk name="num-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
        <clip pos="1" side="tl" part="lem"/> 
        <clip pos="1" side="tl" part="a_num"/> 
        <!-- We could have used <lit-tag v="num"/> -->
    </lu>
    <b pos="1"/>
    <lu><var n="noun_lu"/></lu>
    </chunk>
     </out>
  </action>
</rule>



<rule comment="RULE: prep num nom"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
     <call-macro n="choose_case_and_postposition">
        <with-param pos="1"/>
     </call-macro>
  <call-macro n="build-noun-lu"><with-param pos="3"/></call-macro>
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
        <out> <!-- with postposition -->
    <chunk name="prep-num-nom">
    <tags>
    <tag><var n="pptag"/></tag>
    </tags>
    <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
        <!-- We could have used <lit-tag v="num"/> -->
    </lu>
    <b/>
      <lu>  
        <var n="noun_lu"/>
      </lu>
     <b/>
   <lu>  
        <var n="postposition_lu"/>
        </lu>
    </chunk>
     </out>
  </when>
      <otherwise> <!-- without postposition -->
        <out>
          <chunk name="prep-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
   <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
        <!-- We could have used <lit-tag v="num"/> -->
    </lu>
    <b/>
            <lu>  
               <var n="noun_lu"/>
            </lu>
          </chunk>
        </out>
      </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space">
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>

<rule comment="RULE: det num nom"> 
    <pattern>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
       <call-macro n="initialize_number"/>
    <call-macro n="initialize_case_to_nominative"/>
       <call-macro n="build-noun-lu-with-possessive">
      <with-param pos="3"/> <!-- noun -->
      <with-param pos="1"/> <!-- possessive -->
       </call-macro>
  <choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
  <out>
    <chunk name="det-num-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
        <clip pos="1" side="tl" part="a_det"/>
        <clip pos="1" side="tl" part="a_dem"/>
    </lu>
        <lu>
<var n="noun_lu_with_poss"/>
</lu>
    </chunk>
    </out>
</when>

 <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <out>
    <chunk name="det-num-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
  <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
    </lu>
 <b pos="1"/>
    <lu> 
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>

<otherwise>
    <out>
    <chunk name="det-num-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
    </lu>
<b pos="1"/>
    <lu>  
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
</otherwise>
</choose>
  </action>
</rule>


<rule comment="RULE: prep det num nom">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition"><with-param pos="1"/></call-macro>
  <call-macro n="initialize_number"/>
  <call-macro n="build-noun-lu-with-possessive"><with-param pos="4"/><with-param pos="2"/></call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-num-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-num-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
              <lu> 
                <var n="noun_lu_with_poss"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-det-num-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
            <lu>  
               <var n="noun_lu_with_poss"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-num-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-num-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
             <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-det-num-nom">
              <tags>
                  <tag><var n="pptag"/></tag>
              </tags>
              <lu>  
                 <var n="noun_lu_with_poss"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
        <!-- Superblank management may surely be improved -->
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="2"/>
        </call-macro>
<call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="3"/>
        </call-macro>
  </action>
</rule>


<rule comment="RULE: det adjec nom">  
  <pattern>
     <pattern-item n="det"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="3"/></call-macro>      
       <call-macro n="initialize_case_to_nominative"/>
   <call-macro n="build-noun-lu-with-possessive">
          <with-param pos="3"/>
          <with-param pos="1"/>
    </call-macro>
<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="det-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
    <b pos="1"/>
    <lu>
        <clip pos="2" side="tl" part="whole"/> 
    </lu>
    <b pos="2"/>
    <lu>  
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when>  <!-- possessive -->
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <out>
    <chunk name="det-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
    <lu>
        <clip pos="2" side="tl" part="whole"/> 
    </lu>
    <b pos="2"/>
    <lu>
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="det-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
        <clip pos="2" side="tl" part="whole"/> 
    </lu>
     <b pos="2"/>
    <lu><var n="noun_lu_with_poss"/></lu>
    </chunk>
     </out>
    </otherwise>
</choose>
  </action>
</rule>


<rule comment="RULE: num adjec nom"> 
  <pattern>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>

<call-macro n="choose_case_and_postposition">
        <with-param pos="1"/>
     </call-macro> 
       <call-macro n="initialize_case_to_nominative"/>
 <call-macro n="build-noun-lu"><with-param pos="3"/></call-macro>
    <out>
    <chunk name="num-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
        <clip pos="1" side="tl" part="lem"/> 
        <clip pos="1" side="tl" part="a_num"/> 
        <!-- We could have used <lit-tag v="num"/> -->
    </lu>
    <b pos="1"/>
    <lu>
        <clip pos="2" side="tl" part="whole"/> 
    </lu>
    <b pos="2"/>
     <lu><var n="noun_lu"/></lu>
    </chunk>
    </out>
  </action>
</rule>

<rule comment="RULE: det num adjec nom">  
  <pattern>
     <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
       
      
 <call-macro n="initialize_case_to_nominative"/>
   <call-macro n="build-noun-lu-with-possessive">
          <with-param pos="4"/>
          <with-param pos="1"/>
    </call-macro>
<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="det-num-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="2" side="tl" part="lem"/>
     <clip pos="2" side="tl" part="a_num"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
    <b pos="1"/>
    <lu>
        <clip pos="2" side="tl" part="whole"/> 
    </lu>
    <b pos="2"/>
    <lu>  
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when>  <!-- possessive -->
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <out>
    <chunk name="det-num-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
<lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
    </lu>
    <b pos="1"/>
    <lu>
        <clip pos="3" side="tl" part="whole"/> 
    </lu>
    <b pos="3"/>
    <lu>
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
    <out>
    <chunk name="det-num-adjec-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
<!-- <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
    </lu> -->
<b pos="1"/>
    <lu>
        <clip pos="3" side="tl" part="whole"/> 
    </lu>
     <b pos="3"/>
    <lu><var n="noun_lu_with_poss"/></lu>
    </chunk>
     </out>
    </otherwise>
</choose>
  </action>
</rule>


<rule comment="RULE: prep num adjec nom"> 
    <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
<call-macro n="choose_case_and_postposition">
        <with-param pos="1"/>
     </call-macro>
<call-macro n="build-noun-lu"><with-param pos="4"/></call-macro> 
 <choose>
    <when>
 
      <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated --> 

    <out>
    <chunk name="prep-num-adjec-nom">
    <tags>
    <tag><var n="pptag"/></tag>
    </tags>
    <lu>
        <clip pos="2" side="tl" part="lem"/> 
        <clip pos="2" side="tl" part="a_num"/> 
        <!-- We could have used <lit-tag v="num"/> -->
    </lu>
    <b/>
    <lu>
        <clip pos="3" side="tl" part="whole"/> 
    </lu>
   <b/>
    <lu><var n="noun_lu"/></lu>
  <b/>
<lu>
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
    </when>
    <otherwise> 
      <out>
        <chunk name="prep-num-adjec-nom">
           <tags>
             <tag><var n="pptag"/></tag>
           </tags>
          <lu>
             <clip pos="2" side="tl" part="lem"/> 
              <clip pos="2" side="tl" part="a_num"/> 
             <!-- We could have used <lit-tag v="num"/> -->
          </lu>
           <b/>
           <lu>
              <clip pos="3" side="tl" part="whole"/> 
           </lu>
           <b/>
            <lu>  
             <clip pos="4" side="tl" part="lem"/> 
             <clip pos="4" side="tl" part="a_nom"/>
             <var n="number"/> 
             <var n="case"/>  
           </lu>	
        </chunk>
      </out>
    </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
       <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="2"/>
        </call-macro>   
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="3"/>
        </call-macro>
  </action>
</rule>


<rule comment="RULE: prep adjec nom"> 
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="3"/></call-macro> 

     <call-macro n="choose_case_and_postposition">
        <with-param pos="1"/>
     </call-macro>
    <call-macro n="build-noun-lu"><with-param pos="3"/></call-macro> 
    <choose>
    <when>
    <!-- *** -->
      <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->
        <out>
          <chunk name="prep-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
             <lu>
               <clip pos="2" side="tl" part="whole"/> 
            </lu>
            <b/>
            <lu>  
               <var n="noun_lu"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
    </when>
    <otherwise> 
      <out>
        <chunk name="prep-adjec-nom">
           <tags>
             <tag><var n="pptag"/></tag>
           </tags>
           <lu>
              <clip pos="2" side="tl" part="whole"/> 
           </lu>
           <b/>
           <lu>  
               <var n="noun_lu"/>
           </lu>
        </chunk>
      </out>
    </otherwise>
    </choose>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="2"/>
        </call-macro>
  </action>
</rule>

<rule comment="RULE: prep det adjec nom">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition"><with-param pos="1"/></call-macro>
  <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="4"/></call-macro> 
  <call-macro n="build-noun-lu-with-possessive"><with-param pos="4"/><with-param pos="2"/></call-macro>   <call-macro n="initialize_number"/>
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-adjec-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-adjec-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b/>
              <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu>
              <b/>
              <lu> 
                <var n="noun_lu_with_poss"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-det-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
             <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu> 
             <b/>
             <lu>  
               <var n="noun_lu_with_poss"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-adjec-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu> 
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-adjec-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
             <b/>
             <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu> 
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-det-adjec-nom">
              <tags>
                  <tag><var n="pptag"/></tag>
              </tags>
             <lu> 
               <clip pos="3" side="tl" part="whole"/> 
             </lu> 
             <b/>
              <lu>  
                 <var n="noun_lu_with_poss"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
        <!-- Superblank management may surely be improved -->
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="2"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="3"/>
        </call-macro>
  </action>
</rule>

<rule comment="RULE: prep det num adjec nom">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="num"/>
    <pattern-item n="adjec"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition"><with-param pos="1"/></call-macro>
  <call-macro n="initialize_number"/>
  <call-macro n="build-noun-lu-with-possessive"><with-param pos="5"/><with-param pos="2"/></call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-num-adjec-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
              <lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-num-adjec-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
<lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
              <lu> 
                <var n="noun_lu_with_poss"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-det-num-adjec-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
<lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
            <lu>  
               <var n="noun_lu_with_poss"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-num-adjec-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
<lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-num-adjec-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
             <b/>
<lu>
             <clip pos="3" side="tl" part="lem"/> 
             <clip pos="3" side="tl" part="a_num"/> 
             </lu>
             <b/>
<lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-det-num-adjec-nom">
              <tags>
                  <tag><var n="pptag"/></tag>
              </tags>
<lu> 
               <clip pos="4" side="tl" part="whole"/> 
             </lu>
              <b/>
              <lu>  
                 <var n="noun_lu_with_poss"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
        <!-- Superblank management may surely be improved -->
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="2"/>
        </call-macro>
<call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="3"/>
        </call-macro>
<call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="4"/>
        </call-macro>
  </action>
</rule>

   

<rule comment="RULE: prep det nom">  
  <pattern>
    <pattern-item n="prep"/>
    <pattern-item n="det"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>

  <call-macro n="choose_case_and_postposition"><with-param pos="1"/></call-macro>

  <call-macro n="initialize_number"/>
  <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="3"/></call-macro> 
  <call-macro n="build-noun-lu-with-possessive"><with-param pos="3"/><with-param pos="2"/></call-macro> 
    <choose>
      <when>  
       <test><equal><var n="genpp"/><lit v="yes"/></equal></test> 
       <!-- when there is postposition information, it is generated -->

       <choose>
         <when> <!-- Demonstrative, postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
             </chunk>
           </out>
        </when>
       
        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <b/>
              <lu> 
                <var n="noun_lu_with_poss"/>
              </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
           </chunk>
         </out>
       </when>


       <otherwise> <!-- no possessive or demonstrative, postposition -->
        <out>
          <chunk name="prep-det-nom">
            <tags>
                <tag><var n="pptag"/></tag>
            </tags>
            <lu>  
               <var n="noun_lu_with_poss"/>
            </lu>
            <b/>
            <lu>  
               <var n="postposition_lu"/>
            </lu>
          </chunk>
        </out>
       </otherwise>
       
      </choose>
      </when>
      <otherwise> <!-- no postposition -->
        <choose>   

         <when> <!-- Demonstrative, no postposition -->
           <test><equal><clip pos="2" side="sl" part="a_dem"/><lit-tag v="dem"/>              </equal></test>
           <out>
             <chunk name="prep-det-nom">
             <tags>
                <tag><lit-tag v="SN"/></tag>
             </tags>
             <lu>
             <clip pos="2" side="tl" part="lem"/>
             <clip pos="2" side="tl" part="a_det"/>
             <clip pos="2" side="tl" part="a_dem"/>
             </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
             </chunk>
           </out>
        </when>

        <when>  <!-- Possessive, with postposition -->
           <test><equal><clip pos="2" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
           <out>
            <chunk name="prep-det-nom">
              <tags>
                <tag><lit-tag v="SN"/></tag>
              </tags>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
             <b/>
             <lu>  
                <var n="noun_lu_with_poss"/>
             </lu>
           </chunk>
         </out>
       </when>
          

          <otherwise> <!-- No possessive, no demonstrative -->
           <out>
             <chunk name="prep-det-nom">
              <tags>
                  <tag><var n="pptag"/></tag>
              </tags>
              <lu>  
                 <var n="noun_lu_with_poss"/>
              </lu>
             </chunk>
            </out>
	  </otherwise>
       </choose>
     </otherwise>
    </choose>
        <!-- Superblank management may surely be improved -->
        <call-macro n="out-blank-if-not-single-space"> 
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="out-blank-if-not-single-space"> 
         <with-param pos="2"/>
        </call-macro>
  </action>
</rule>


<rule comment="RULE: det nom"> 
  <pattern>
    <pattern-item n="det"/>
    <pattern-item n="nom"/>
  </pattern>
  <action>
    <call-macro n="initialize_number"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="2"/></call-macro> 
    <call-macro n="initialize_case_to_nominative"/>
    <call-macro n="build-noun-lu-with-possessive">
    <!-- This macro can be carefully used even if there is no possessive -->
      <with-param pos="2"/> <!-- noun -->
      <with-param pos="1"/> <!-- possessive -->
    </call-macro>


<choose>
  <when> <!-- Demonstrative -->
    <test><equal><clip pos="1" side="sl" part="a_dem"/><lit-tag v="dem"/></equal></test>
    <out>
    <chunk name="det-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_det"/>
      <clip pos="1" side="tl" part="a_dem"/>
    </lu>
    <b pos="1"/>
    <lu>  
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>
  
  <when> 
    <test><equal><clip pos="1" side="sl" part="a_pos"/><lit-tag v="pos"/></equal></test>
    <out>
    <chunk name="det-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="whole"/>
    </lu>
    <b pos="1"/>
    <lu> 
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
  </when>

  <otherwise>
    <out>
    <chunk name="det-nom">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>  
      <var n="noun_lu_with_poss"/>
     </lu>
    </chunk>
    </out>
    <call-macro n="out-blank-if-not-single-space"> 
        <with-param pos="1"/>
    </call-macro>
  </otherwise>
</choose>
  </action>
</rule>


<rule comment="RULE: nom">  <!-- FMT -->
  <pattern>
    <pattern-item n="nom"/>
  </pattern>
  <action>
   <call-macro n="initialize_number"/>
   <call-macro n="initialize_case_to_nominative"/>
   <call-macro n="assign-tl-plural-if-sl-nbr-plural"><with-param pos="1"/></call-macro> 
    <out>
    <chunk name="SN">
    <tags>
    <tag><lit-tag v="nom"/></tag>
    </tags>
    <lu>  
        <clip pos="1" side="tl" part="lem"/> 
        <clip pos="1" side="tl" part="a_nom"/>
        <clip pos="1" side="tl" part="a_gen"/>
        <var n="number"/> 
        <var n="case"/>  
     </lu>
    </chunk>
    </out>
  </action>
</rule>


<rule comment="RULE: subj-pron">
  <pattern>
    <pattern-item n="subj-pron"/>
  </pattern>
  <action>
  <choose>
    <when>
      <test>
       <equal>
         <clip pos="1" side="sl" part="a_nbr"/>
         <lit-tag v="sp"/>
       </equal>
      </test>
       <let><var n="number"/><lit-tag v="sg"/></let> <!-- choosing singular in the absence of information -->
    </when>
       <otherwise>
         <let>
           <var n="number"/><clip pos="1" side="sl" part="a_nbr"/>
         </let>
       </otherwise>
  </choose>
  <choose>
    <when>
     <test>  
       <equal>
          <clip pos="1" side="sl" part="a_pers"/>
          <lit-tag v="p2"/>
       </equal>
     </test>
     <let><var n="formality"/><lit-tag v="frm"/></let>
    </when>
     <otherwise>
     <let><var n="formality"/><lit v=""/></let>
     </otherwise>
  </choose>
  <call-macro n="initialize_case_to_nominative"/> <!-- will set it to nominative -->
  <out>
   <chunk name="subj-pron">
    <tags>
    <tag><lit-tag v="SN"/></tag>
    </tags>
    <lu>
      <clip pos="1" side="tl" part="lem"/>
      <clip pos="1" side="tl" part="a_kaz_perspron"/>
      <clip pos="1" side="sl" part="a_pers"/>
      <var n="number"/>
      <var n="formality"/>
      <var n="case"/>
    </lu>
  </chunk>
  </out>
  <let><var n="verb-pers"/><clip pos="1" side="sl" part="a_pers"/></let>
  <let><var n="verb-nbr"/><var n="number"/></let>
 </action>
</rule>
 
    <rule comment="REGLA: SENT">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <let> <!-- approx: assign 3rd person singular for verbs -->
          <var n="verb-pers"/>
          <lit-tag v="p3"/>
        </let>
        <let>
          <var n="verb-nbr"/>
          <lit-tag v="sg"/>
        </let>
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

  </section-rules>
</transfer>

